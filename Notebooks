{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPqxvoCuU83rIp7FSdVEEVO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Irenee123/Sentimental_analysis/blob/main/Notebooks\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Trrlbf_P9trR",
        "outputId": "bf4bbe60-ee82-468d-b8d8-0c55c499d19c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "All libraries imported successfully!\n",
            "Ready for dataset analysis\n"
          ]
        }
      ],
      "source": [
        "# Data manipulation and analysis\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Data visualization\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Statistical analysis\n",
        "from scipy import stats\n",
        "from collections import Counter\n",
        "import warnings\n",
        "\n",
        "# Text analysis basics\n",
        "import re\n",
        "# Skip wordcloud for now - will install later if needed\n",
        "\n",
        "# Configure visualization settings\n",
        "plt.style.use('default')\n",
        "sns.set_palette(\"husl\")\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "# Display settings for better output\n",
        "pd.set_option('display.max_columns', None)\n",
        "pd.set_option('display.width', None)\n",
        "pd.set_option('display.max_colwidth', 100)\n",
        "\n",
        "print(\"All libraries imported successfully!\")\n",
        "print(\"Ready for dataset analysis\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Dataset Loading and Understanding\n",
        "\n",
        "Load the Twitter dataset and examine its basic structure, dimensions, and properties."
      ],
      "metadata": {
        "id": "6kB1s9ECAAo0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "import pandas as pd # Import pandas\n",
        "\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IkeujnAh-8Es",
        "outputId": "870d4055-acad-4e9c-c629-e0484d1b7066"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the dataset\n",
        "df = pd.read_csv('/content/drive/My Drive/Tweets.csv')\n",
        "\n",
        "print(f\"Dataset loaded successfully!\")\n",
        "print(f\"Dataset shape: {df.shape}\")\n",
        "print(f\"Total samples: {df.shape[0]:,}\")\n",
        "print(f\"Total features: {df.shape[1]}\")\n",
        "\n",
        "# Display basic information about the dataset\n",
        "print(\"\\n\" + \"=\"*50)\n",
        "print(\"DATASET OVERVIEW\")\n",
        "print(\"=\"*50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NfT_mKuc-jH9",
        "outputId": "901d1447-04fb-40a9-8947-54c69d92abf0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset loaded successfully!\n",
            "Dataset shape: (14640, 15)\n",
            "Total samples: 14,640\n",
            "Total features: 15\n",
            "\n",
            "==================================================\n",
            "DATASET OVERVIEW\n",
            "==================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Examine column names and data types\n",
        "print(\"Column Information:\")\n",
        "print(f\"Total columns: {len(df.columns)}\")\n",
        "print(f\"Column names: {list(df.columns)}\")\n",
        "\n",
        "print(\"\\nData Types:\")\n",
        "print(df.dtypes)\n",
        "\n",
        "print(\"\\nDataset Info:\")\n",
        "print(df.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R3K-BNsQ_0e8",
        "outputId": "9a716ca2-34fd-4f97-c044-bb35be1d2c35"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Column Information:\n",
            "Total columns: 15\n",
            "Column names: ['tweet_id', 'airline_sentiment', 'airline_sentiment_confidence', 'negativereason', 'negativereason_confidence', 'airline', 'airline_sentiment_gold', 'name', 'negativereason_gold', 'retweet_count', 'text', 'tweet_coord', 'tweet_created', 'tweet_location', 'user_timezone']\n",
            "\n",
            "Data Types:\n",
            "tweet_id                          int64\n",
            "airline_sentiment                object\n",
            "airline_sentiment_confidence    float64\n",
            "negativereason                   object\n",
            "negativereason_confidence       float64\n",
            "airline                          object\n",
            "airline_sentiment_gold           object\n",
            "name                             object\n",
            "negativereason_gold              object\n",
            "retweet_count                     int64\n",
            "text                             object\n",
            "tweet_coord                      object\n",
            "tweet_created                    object\n",
            "tweet_location                   object\n",
            "user_timezone                    object\n",
            "dtype: object\n",
            "\n",
            "Dataset Info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 14640 entries, 0 to 14639\n",
            "Data columns (total 15 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   tweet_id                      14640 non-null  int64  \n",
            " 1   airline_sentiment             14640 non-null  object \n",
            " 2   airline_sentiment_confidence  14640 non-null  float64\n",
            " 3   negativereason                9178 non-null   object \n",
            " 4   negativereason_confidence     10522 non-null  float64\n",
            " 5   airline                       14640 non-null  object \n",
            " 6   airline_sentiment_gold        40 non-null     object \n",
            " 7   name                          14640 non-null  object \n",
            " 8   negativereason_gold           32 non-null     object \n",
            " 9   retweet_count                 14640 non-null  int64  \n",
            " 10  text                          14640 non-null  object \n",
            " 11  tweet_coord                   1019 non-null   object \n",
            " 12  tweet_created                 14640 non-null  object \n",
            " 13  tweet_location                9907 non-null   object \n",
            " 14  user_timezone                 9820 non-null   object \n",
            "dtypes: float64(2), int64(2), object(11)\n",
            "memory usage: 1.7+ MB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Display first few rows to understand data structure\n",
        "print(\"First 5 rows of the dataset:\")\n",
        "print(df.head())\n",
        "\n",
        "print(\"\\nLast 5 rows of the dataset:\")\n",
        "print(df.tail())\n",
        "\n",
        "# Check for unique values in key columns\n",
        "print(f\"\\nUnique values in 'airline_sentiment': {df['airline_sentiment'].unique()}\")\n",
        "print(f\"Number of unique airlines: {df['airline'].nunique()}\")\n",
        "print(f\"Unique airlines: {df['airline'].unique()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QN6SjVo3AGFN",
        "outputId": "c589152c-3402-4dbb-80be-071a9b69e67d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "First 5 rows of the dataset:\n",
            "             tweet_id airline_sentiment  airline_sentiment_confidence  \\\n",
            "0  570306133677760513           neutral                        1.0000   \n",
            "1  570301130888122368          positive                        0.3486   \n",
            "2  570301083672813571           neutral                        0.6837   \n",
            "3  570301031407624196          negative                        1.0000   \n",
            "4  570300817074462722          negative                        1.0000   \n",
            "\n",
            "  negativereason  negativereason_confidence         airline  \\\n",
            "0            NaN                        NaN  Virgin America   \n",
            "1            NaN                     0.0000  Virgin America   \n",
            "2            NaN                        NaN  Virgin America   \n",
            "3     Bad Flight                     0.7033  Virgin America   \n",
            "4     Can't Tell                     1.0000  Virgin America   \n",
            "\n",
            "  airline_sentiment_gold        name negativereason_gold  retweet_count  \\\n",
            "0                    NaN     cairdin                 NaN              0   \n",
            "1                    NaN    jnardino                 NaN              0   \n",
            "2                    NaN  yvonnalynn                 NaN              0   \n",
            "3                    NaN    jnardino                 NaN              0   \n",
            "4                    NaN    jnardino                 NaN              0   \n",
            "\n",
            "                                                                                                  text  \\\n",
            "0                                                                  @VirginAmerica What @dhepburn said.   \n",
            "1                             @VirginAmerica plus you've added commercials to the experience... tacky.   \n",
            "2                              @VirginAmerica I didn't today... Must mean I need to take another trip!   \n",
            "3  @VirginAmerica it's really aggressive to blast obnoxious \"entertainment\" in your guests' faces &...   \n",
            "4                                              @VirginAmerica and it's a really big bad thing about it   \n",
            "\n",
            "  tweet_coord              tweet_created tweet_location  \\\n",
            "0         NaN  2015-02-24 11:35:52 -0800            NaN   \n",
            "1         NaN  2015-02-24 11:15:59 -0800            NaN   \n",
            "2         NaN  2015-02-24 11:15:48 -0800      Lets Play   \n",
            "3         NaN  2015-02-24 11:15:36 -0800            NaN   \n",
            "4         NaN  2015-02-24 11:14:45 -0800            NaN   \n",
            "\n",
            "                user_timezone  \n",
            "0  Eastern Time (US & Canada)  \n",
            "1  Pacific Time (US & Canada)  \n",
            "2  Central Time (US & Canada)  \n",
            "3  Pacific Time (US & Canada)  \n",
            "4  Pacific Time (US & Canada)  \n",
            "\n",
            "Last 5 rows of the dataset:\n",
            "                 tweet_id airline_sentiment  airline_sentiment_confidence  \\\n",
            "14635  569587686496825344          positive                        0.3487   \n",
            "14636  569587371693355008          negative                        1.0000   \n",
            "14637  569587242672398336           neutral                        1.0000   \n",
            "14638  569587188687634433          negative                        1.0000   \n",
            "14639  569587140490866689           neutral                        0.6771   \n",
            "\n",
            "               negativereason  negativereason_confidence   airline  \\\n",
            "14635                     NaN                     0.0000  American   \n",
            "14636  Customer Service Issue                     1.0000  American   \n",
            "14637                     NaN                        NaN  American   \n",
            "14638  Customer Service Issue                     0.6659  American   \n",
            "14639                     NaN                     0.0000  American   \n",
            "\n",
            "      airline_sentiment_gold             name negativereason_gold  \\\n",
            "14635                    NaN  KristenReenders                 NaN   \n",
            "14636                    NaN         itsropes                 NaN   \n",
            "14637                    NaN         sanyabun                 NaN   \n",
            "14638                    NaN       SraJackson                 NaN   \n",
            "14639                    NaN        daviddtwu                 NaN   \n",
            "\n",
            "       retweet_count  \\\n",
            "14635              0   \n",
            "14636              0   \n",
            "14637              0   \n",
            "14638              0   \n",
            "14639              0   \n",
            "\n",
            "                                                                                                      text  \\\n",
            "14635                                      @AmericanAir thank you we got on a different flight to Chicago.   \n",
            "14636  @AmericanAir leaving over 20 minutes Late Flight. No warnings or communication until we were 15 ...   \n",
            "14637                                         @AmericanAir Please bring American Airlines to #BlackBerry10   \n",
            "14638  @AmericanAir you have my money, you change my flight, and don't answer your phones! Any other su...   \n",
            "14639  @AmericanAir we have 8 ppl so we need 2 know how many seats are on the next flight. Plz put us o...   \n",
            "\n",
            "      tweet_coord              tweet_created tweet_location  \\\n",
            "14635         NaN  2015-02-22 12:01:01 -0800            NaN   \n",
            "14636         NaN  2015-02-22 11:59:46 -0800          Texas   \n",
            "14637         NaN  2015-02-22 11:59:15 -0800  Nigeria,lagos   \n",
            "14638         NaN  2015-02-22 11:59:02 -0800     New Jersey   \n",
            "14639         NaN  2015-02-22 11:58:51 -0800     dallas, TX   \n",
            "\n",
            "                    user_timezone  \n",
            "14635                         NaN  \n",
            "14636                         NaN  \n",
            "14637                         NaN  \n",
            "14638  Eastern Time (US & Canada)  \n",
            "14639                         NaN  \n",
            "\n",
            "Unique values in 'airline_sentiment': ['neutral' 'positive' 'negative']\n",
            "Number of unique airlines: 6\n",
            "Unique airlines: ['Virgin America' 'United' 'Southwest' 'Delta' 'US Airways' 'American']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. Data Quality Assessment\n",
        "\n",
        "Check for missing values, duplicates, and data quality issues that need attention."
      ],
      "metadata": {
        "id": "TEU7KI-6AZB0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values\n",
        "print(\"Missing Values Analysis:\")\n",
        "print(\"=\"*30)\n",
        "missing_values = df.isnull().sum()\n",
        "missing_percentage = (missing_values / len(df)) * 100\n",
        "\n",
        "missing_info = pd.DataFrame({\n",
        "    'Column': missing_values.index,\n",
        "    'Missing_Count': missing_values.values,\n",
        "    'Missing_Percentage': missing_percentage.values\n",
        "})\n",
        "\n",
        "print(missing_info[missing_info['Missing_Count'] > 0])\n",
        "\n",
        "if missing_info['Missing_Count'].sum() == 0:\n",
        "    print(\"No missing values found in the dataset!\")\n",
        "else:\n",
        "    print(f\"\\nTotal missing values: {missing_info['Missing_Count'].sum()}\")\n",
        "    print(f\"Columns with missing values: {len(missing_info[missing_info['Missing_Count'] > 0])}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qRjGVBBLAKo0",
        "outputId": "3e436c68-5ca1-492b-b0cc-e1468bb291cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing Values Analysis:\n",
            "==============================\n",
            "                       Column  Missing_Count  Missing_Percentage\n",
            "3              negativereason           5462           37.308743\n",
            "4   negativereason_confidence           4118           28.128415\n",
            "6      airline_sentiment_gold          14600           99.726776\n",
            "8         negativereason_gold          14608           99.781421\n",
            "11                tweet_coord          13621           93.039617\n",
            "13             tweet_location           4733           32.329235\n",
            "14              user_timezone           4820           32.923497\n",
            "\n",
            "Total missing values: 61962\n",
            "Columns with missing values: 7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for duplicate rows\n",
        "print(\"Duplicate Analysis:\")\n",
        "print(\"=\"*20)\n",
        "\n",
        "total_duplicates = df.duplicated().sum()\n",
        "print(f\"Total duplicate rows: {total_duplicates}\")\n",
        "\n",
        "if total_duplicates > 0:\n",
        "    print(f\"Percentage of duplicates: {(total_duplicates / len(df)) * 100:.2f}%\")\n",
        "else:\n",
        "    print(\"No duplicate rows found!\")\n",
        "\n",
        "# Check for duplicate texts (important for sentiment analysis)\n",
        "text_duplicates = df['text'].duplicated().sum()\n",
        "print(f\"\\nDuplicate tweet texts: {text_duplicates}\")\n",
        "\n",
        "if text_duplicates > 0:\n",
        "    print(f\"Percentage of duplicate texts: {(text_duplicates / len(df)) * 100:.2f}%\")\n",
        "    # Show example of duplicate texts\n",
        "    duplicate_texts = df[df['text'].duplicated(keep=False)]['text'].value_counts().head()\n",
        "    print(f\"\\nMost common duplicate texts:\")\n",
        "    print(duplicate_texts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eSRpHrxLAgrU",
        "outputId": "952d1b58-1649-4663-a48e-d2ef14876cd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Duplicate Analysis:\n",
            "====================\n",
            "Total duplicate rows: 36\n",
            "Percentage of duplicates: 0.25%\n",
            "\n",
            "Duplicate tweet texts: 213\n",
            "Percentage of duplicate texts: 1.45%\n",
            "\n",
            "Most common duplicate texts:\n",
            "text\n",
            "@united thanks         6\n",
            "@JetBlue thanks!       5\n",
            "@SouthwestAir sent     5\n",
            "@AmericanAir thanks    5\n",
            "@united thank you!     4\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. Sentiment Distribution Analysis\n",
        "\n",
        "Analyze the distribution of sentiment labels and understand class balance."
      ],
      "metadata": {
        "id": "04FXXen0AmdU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Analyze sentiment distribution\n",
        "print(\"Sentiment Distribution Analysis:\")\n",
        "print(\"=\"*35)\n",
        "\n",
        "sentiment_counts = df['airline_sentiment'].value_counts()\n",
        "sentiment_percentages = (sentiment_counts / len(df)) * 100\n",
        "\n",
        "print(\"Absolute counts:\")\n",
        "print(sentiment_counts)\n",
        "\n",
        "print(\"\\nPercentage distribution:\")\n",
        "for sentiment, percentage in sentiment_percentages.items():\n",
        "    print(f\"{sentiment}: {percentage:.2f}%\")\n",
        "\n",
        "# Create visualization for sentiment distribution\n",
        "plt.figure(figsize=(12, 5))\n",
        "\n",
        "# Bar plot\n",
        "plt.subplot(1, 2, 1)\n",
        "sentiment_counts.plot(kind='bar', color=['red', 'gray', 'green'])\n",
        "plt.title('Sentiment Distribution (Count)')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Count')\n",
        "plt.xticks(rotation=45)\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "\n",
        "# Pie chart\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.pie(sentiment_counts.values, labels=sentiment_counts.index, autopct='%1.1f%%',\n",
        "        colors=['red', 'gray', 'green'], startangle=90)\n",
        "plt.title('Sentiment Distribution (Percentage)')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Check for class imbalance\n",
        "max_class = sentiment_counts.max()\n",
        "min_class = sentiment_counts.min()\n",
        "imbalance_ratio = max_class / min_class\n",
        "\n",
        "print(f\"\\nClass Imbalance Analysis:\")\n",
        "print(f\"Most common class: {sentiment_counts.idxmax()} ({sentiment_counts.max():,} samples)\")\n",
        "print(f\"Least common class: {sentiment_counts.idxmin()} ({sentiment_counts.min():,} samples)\")\n",
        "print(f\"Imbalance ratio: {imbalance_ratio:.2f}:1\")\n",
        "\n",
        "if imbalance_ratio > 2:\n",
        "    print(\"WARNING: Significant class imbalance detected!\")\n",
        "    print(\"Consider using techniques like SMOTE, class weights, or stratified sampling.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 854
        },
        "id": "EJeO4LQ_AnUs",
        "outputId": "caa7abdd-9939-470e-c41f-93aa34260797"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sentiment Distribution Analysis:\n",
            "===================================\n",
            "Absolute counts:\n",
            "airline_sentiment\n",
            "negative    9178\n",
            "neutral     3099\n",
            "positive    2363\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Percentage distribution:\n",
            "negative: 62.69%\n",
            "neutral: 21.17%\n",
            "positive: 16.14%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Class Imbalance Analysis:\n",
            "Most common class: negative (9,178 samples)\n",
            "Least common class: positive (2,363 samples)\n",
            "Imbalance ratio: 3.88:1\n",
            "WARNING: Significant class imbalance detected!\n",
            "Consider using techniques like SMOTE, class weights, or stratified sampling.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Text Analysis and Statistics\n",
        "\n",
        "Analyze the text data characteristics including length, word count, and common patterns."
      ],
      "metadata": {
        "id": "g-YyCUx2Awjc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate text statistics\n",
        "print(\"Text Statistics Analysis:\")\n",
        "print(\"=\"*25)\n",
        "\n",
        "# Text length analysis\n",
        "df['text_length'] = df['text'].str.len()\n",
        "df['word_count'] = df['text'].str.split().str.len()\n",
        "\n",
        "# Basic statistics\n",
        "print(\"Text Length Statistics:\")\n",
        "print(f\"Average text length: {df['text_length'].mean():.2f} characters\")\n",
        "print(f\"Median text length: {df['text_length'].median():.2f} characters\")\n",
        "print(f\"Min text length: {df['text_length'].min()} characters\")\n",
        "print(f\"Max text length: {df['text_length'].max()} characters\")\n",
        "print(f\"Standard deviation: {df['text_length'].std():.2f}\")\n",
        "\n",
        "print(\"\\nWord Count Statistics:\")\n",
        "print(f\"Average word count: {df['word_count'].mean():.2f} words\")\n",
        "print(f\"Median word count: {df['word_count'].median():.2f} words\")\n",
        "print(f\"Min word count: {df['word_count'].min()} words\")\n",
        "print(f\"Max word count: {df['word_count'].max()} words\")\n",
        "print(f\"Standard deviation: {df['word_count'].std():.2f}\")\n",
        "\n",
        "# Visualize text length distribution\n",
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "# Text length distribution\n",
        "plt.subplot(2, 3, 1)\n",
        "plt.hist(df['text_length'], bins=50, alpha=0.7, color='skyblue', edgecolor='black')\n",
        "plt.title('Distribution of Text Length')\n",
        "plt.xlabel('Text Length (characters)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "\n",
        "# Word count distribution\n",
        "plt.subplot(2, 3, 2)\n",
        "plt.hist(df['word_count'], bins=30, alpha=0.7, color='lightgreen', edgecolor='black')\n",
        "plt.title('Distribution of Word Count')\n",
        "plt.xlabel('Word Count')\n",
        "plt.ylabel('Frequency')\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "\n",
        "# Text length by sentiment\n",
        "plt.subplot(2, 3, 3)\n",
        "for sentiment in df['airline_sentiment'].unique():\n",
        "    sentiment_data = df[df['airline_sentiment'] == sentiment]['text_length']\n",
        "    plt.hist(sentiment_data, alpha=0.6, label=sentiment, bins=30)\n",
        "plt.title('Text Length by Sentiment')\n",
        "plt.xlabel('Text Length (characters)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend()\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "\n",
        "# Box plot for text length by sentiment\n",
        "plt.subplot(2, 3, 4)\n",
        "df.boxplot(column='text_length', by='airline_sentiment', ax=plt.gca())\n",
        "plt.title('Text Length Distribution by Sentiment')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Text Length')\n",
        "\n",
        "# Box plot for word count by sentiment\n",
        "plt.subplot(2, 3, 5)\n",
        "df.boxplot(column='word_count', by='airline_sentiment', ax=plt.gca())\n",
        "plt.title('Word Count Distribution by Sentiment')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Word Count')\n",
        "\n",
        "# Average metrics by sentiment\n",
        "plt.subplot(2, 3, 6)\n",
        "sentiment_stats = df.groupby('airline_sentiment')[['text_length', 'word_count']].mean()\n",
        "sentiment_stats.plot(kind='bar', ax=plt.gca())\n",
        "plt.title('Average Text Metrics by Sentiment')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Average Count')\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend(['Text Length', 'Word Count'])\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "kzbgD-HFAxi0",
        "outputId": "25cbd37f-003d-4f21-d395-fdce80692956"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Text Statistics Analysis:\n",
            "=========================\n",
            "Text Length Statistics:\n",
            "Average text length: 103.82 characters\n",
            "Median text length: 114.00 characters\n",
            "Min text length: 12 characters\n",
            "Max text length: 186 characters\n",
            "Standard deviation: 36.28\n",
            "\n",
            "Word Count Statistics:\n",
            "Average word count: 17.65 words\n",
            "Median word count: 19.00 words\n",
            "Min word count: 2 words\n",
            "Max word count: 36 words\n",
            "Standard deviation: 6.88\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Analyze text length by sentiment with statistical tests\n",
        "print(\"Statistical Analysis of Text Characteristics by Sentiment:\")\n",
        "print(\"=\"*55)\n",
        "\n",
        "# Group by sentiment and calculate detailed statistics\n",
        "sentiment_text_stats = df.groupby('airline_sentiment')['text_length'].describe()\n",
        "sentiment_word_stats = df.groupby('airline_sentiment')['word_count'].describe()\n",
        "\n",
        "print(\"Text Length Statistics by Sentiment:\")\n",
        "print(sentiment_text_stats)\n",
        "\n",
        "print(\"\\nWord Count Statistics by Sentiment:\")\n",
        "print(sentiment_word_stats)\n",
        "\n",
        "# Check if there are significant differences between groups\n",
        "from scipy.stats import f_oneway\n",
        "\n",
        "negative_texts = df[df['airline_sentiment'] == 'negative']['text_length']\n",
        "neutral_texts = df[df['airline_sentiment'] == 'neutral']['text_length']\n",
        "positive_texts = df[df['airline_sentiment'] == 'positive']['text_length']\n",
        "\n",
        "# ANOVA test for text length differences\n",
        "f_stat, p_value = f_oneway(negative_texts, neutral_texts, positive_texts)\n",
        "print(f\"\\nANOVA Test for Text Length Differences:\")\n",
        "print(f\"F-statistic: {f_stat:.4f}\")\n",
        "print(f\"P-value: {p_value:.6f}\")\n",
        "\n",
        "if p_value < 0.05:\n",
        "    print(\"Result: Significant differences in text length between sentiment groups\")\n",
        "else:\n",
        "    print(\"Result: No significant differences in text length between sentiment groups\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2ntc0_t1A9l7",
        "outputId": "f68c2a0f-c0e7-423e-8b67-3342b344c496"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Statistical Analysis of Text Characteristics by Sentiment:\n",
            "=======================================================\n",
            "Text Length Statistics by Sentiment:\n",
            "                    count        mean        std   min   25%    50%    75%  \\\n",
            "airline_sentiment                                                            \n",
            "negative           9178.0  113.947919  30.719006  12.0  96.0  126.0  138.0   \n",
            "neutral            3099.0   87.359471  37.682903  12.0  57.0   87.0  123.0   \n",
            "positive           2363.0   86.082945  39.482103  12.0  52.0   86.0  124.0   \n",
            "\n",
            "                     max  \n",
            "airline_sentiment         \n",
            "negative           176.0  \n",
            "neutral            167.0  \n",
            "positive           186.0  \n",
            "\n",
            "Word Count Statistics by Sentiment:\n",
            "                    count       mean       std  min   25%   50%   75%   max\n",
            "airline_sentiment                                                          \n",
            "negative           9178.0  19.686206  5.944701  2.0  16.0  21.0  24.0  36.0\n",
            "neutral            3099.0  14.408842  6.962293  2.0   9.0  14.0  20.0  31.0\n",
            "positive           2363.0  14.013119  7.039221  2.0   8.0  14.0  20.0  31.0\n",
            "\n",
            "ANOVA Test for Text Length Differences:\n",
            "F-statistic: 1103.6099\n",
            "P-value: 0.000000\n",
            "Result: Significant differences in text length between sentiment groups\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Airline Analysis\n",
        "\n",
        "Examine sentiment distribution across different airlines to understand patterns."
      ],
      "metadata": {
        "id": "OTEFc90aBD1s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Analyze airlines in the dataset\n",
        "print(\"Airline Analysis:\")\n",
        "print(\"=\"*16)\n",
        "\n",
        "airline_counts = df['airline'].value_counts()\n",
        "print(\"Number of tweets per airline:\")\n",
        "print(airline_counts)\n",
        "\n",
        "print(f\"\\nTotal number of airlines: {len(airline_counts)}\")\n",
        "print(f\"Most mentioned airline: {airline_counts.index[0]} ({airline_counts.iloc[0]:,} tweets)\")\n",
        "print(f\"Least mentioned airline: {airline_counts.index[-1]} ({airline_counts.iloc[-1]:,} tweets)\")\n",
        "\n",
        "# Create crosstab for airline vs sentiment\n",
        "airline_sentiment_crosstab = pd.crosstab(df['airline'], df['airline_sentiment'])\n",
        "print(f\"\\nAirline vs Sentiment Crosstab:\")\n",
        "print(airline_sentiment_crosstab)\n",
        "\n",
        "# Calculate percentage distribution for each airline\n",
        "airline_sentiment_pct = pd.crosstab(df['airline'], df['airline_sentiment'], normalize='index') * 100\n",
        "print(f\"\\nSentiment Percentage by Airline:\")\n",
        "print(airline_sentiment_pct.round(2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ocJ7KNIRBA4T",
        "outputId": "7ea9bd84-9df2-4900-aba6-03a393f8ea97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Airline Analysis:\n",
            "================\n",
            "Number of tweets per airline:\n",
            "airline\n",
            "United            3822\n",
            "US Airways        2913\n",
            "American          2759\n",
            "Southwest         2420\n",
            "Delta             2222\n",
            "Virgin America     504\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Total number of airlines: 6\n",
            "Most mentioned airline: United (3,822 tweets)\n",
            "Least mentioned airline: Virgin America (504 tweets)\n",
            "\n",
            "Airline vs Sentiment Crosstab:\n",
            "airline_sentiment  negative  neutral  positive\n",
            "airline                                       \n",
            "American               1960      463       336\n",
            "Delta                   955      723       544\n",
            "Southwest              1186      664       570\n",
            "US Airways             2263      381       269\n",
            "United                 2633      697       492\n",
            "Virgin America          181      171       152\n",
            "\n",
            "Sentiment Percentage by Airline:\n",
            "airline_sentiment  negative  neutral  positive\n",
            "airline                                       \n",
            "American              71.04    16.78     12.18\n",
            "Delta                 42.98    32.54     24.48\n",
            "Southwest             49.01    27.44     23.55\n",
            "US Airways            77.69    13.08      9.23\n",
            "United                68.89    18.24     12.87\n",
            "Virgin America        35.91    33.93     30.16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize airline analysis\n",
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "# Airlines tweet count\n",
        "plt.subplot(2, 2, 1)\n",
        "airline_counts.plot(kind='bar', color='steelblue')\n",
        "plt.title('Number of Tweets per Airline')\n",
        "plt.xlabel('Airline')\n",
        "plt.ylabel('Number of Tweets')\n",
        "plt.xticks(rotation=45)\n",
        "plt.grid(axis='y', alpha=0.3)\n",
        "\n",
        "# Heatmap of airline vs sentiment\n",
        "plt.subplot(2, 2, 2)\n",
        "sns.heatmap(airline_sentiment_crosstab, annot=True, fmt='d', cmap='Blues', cbar=True)\n",
        "plt.title('Airline vs Sentiment Heatmap (Counts)')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Airline')\n",
        "\n",
        "# Heatmap of airline vs sentiment percentages\n",
        "plt.subplot(2, 2, 3)\n",
        "sns.heatmap(airline_sentiment_pct, annot=True, fmt='.1f', cmap='RdYlBu_r', cbar=True)\n",
        "plt.title('Airline vs Sentiment Heatmap (Percentages)')\n",
        "plt.xlabel('Sentiment')\n",
        "plt.ylabel('Airline')\n",
        "\n",
        "# Stacked bar chart\n",
        "plt.subplot(2, 2, 4)\n",
        "airline_sentiment_crosstab.plot(kind='bar', stacked=True,\n",
        "                                color=['red', 'gray', 'green'], ax=plt.gca())\n",
        "plt.title('Sentiment Distribution by Airline (Stacked)')\n",
        "plt.xlabel('Airline')\n",
        "plt.ylabel('Number of Tweets')\n",
        "plt.xticks(rotation=45)\n",
        "plt.legend(title='Sentiment')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# Find airlines with most positive/negative sentiment\n",
        "print(\"\\nAirline Sentiment Analysis:\")\n",
        "print(\"=\"*26)\n",
        "\n",
        "most_positive_airline = airline_sentiment_pct['positive'].idxmax()\n",
        "most_negative_airline = airline_sentiment_pct['negative'].idxmax()\n",
        "\n",
        "print(f\"Airline with highest positive sentiment percentage: {most_positive_airline} ({airline_sentiment_pct.loc[most_positive_airline, 'positive']:.1f}%)\")\n",
        "print(f\"Airline with highest negative sentiment percentage: {most_negative_airline} ({airline_sentiment_pct.loc[most_negative_airline, 'negative']:.1f}%)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 905
        },
        "id": "lCmq_WCGBLMr",
        "outputId": "a0cd3c96-7acc-42ab-abdb-92f0eeb90420"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Airline Sentiment Analysis:\n",
            "==========================\n",
            "Airline with highest positive sentiment percentage: Virgin America (30.2%)\n",
            "Airline with highest negative sentiment percentage: US Airways (77.7%)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Text Content Analysis\n",
        "\n",
        "Analyze the actual content of tweets to understand common words and patterns."
      ],
      "metadata": {
        "id": "CgZFCS6lBXLk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Analyze text content patterns\n",
        "print(\"Text Content Analysis:\")\n",
        "print(\"=\"*21)\n",
        "\n",
        "# Sample tweets by sentiment\n",
        "print(\"Sample tweets by sentiment:\")\n",
        "print(\"\\nPositive tweets:\")\n",
        "positive_samples = df[df['airline_sentiment'] == 'positive']['text'].head(3)\n",
        "for i, tweet in enumerate(positive_samples, 1):\n",
        "    print(f\"{i}. {tweet}\")\n",
        "\n",
        "print(\"\\nNeutral tweets:\")\n",
        "neutral_samples = df[df['airline_sentiment'] == 'neutral']['text'].head(3)\n",
        "for i, tweet in enumerate(neutral_samples, 1):\n",
        "    print(f\"{i}. {tweet}\")\n",
        "\n",
        "print(\"\\nNegative tweets:\")\n",
        "negative_samples = df[df['airline_sentiment'] == 'negative']['text'].head(3)\n",
        "for i, tweet in enumerate(negative_samples, 1):\n",
        "    print(f\"{i}. {tweet}\")\n",
        "\n",
        "# Check for special characters and patterns\n",
        "print(f\"\\nText Pattern Analysis:\")\n",
        "print(\"=\"*23)\n",
        "\n",
        "# Count tweets with mentions (@)\n",
        "mentions_count = df['text'].str.contains('@', na=False).sum()\n",
        "print(f\"Tweets with mentions (@): {mentions_count} ({(mentions_count/len(df)*100):.1f}%)\")\n",
        "\n",
        "# Count tweets with hashtags (#)\n",
        "hashtags_count = df['text'].str.contains('#', na=False).sum()\n",
        "print(f\"Tweets with hashtags (#): {hashtags_count} ({(hashtags_count/len(df)*100):.1f}%)\")\n",
        "\n",
        "# Count tweets with URLs\n",
        "urls_count = df['text'].str.contains('http', na=False).sum()\n",
        "print(f\"Tweets with URLs: {urls_count} ({(urls_count/len(df)*100):.1f}%)\")\n",
        "\n",
        "# Count tweets with specific patterns\n",
        "exclamation_count = df['text'].str.contains('!', na=False).sum()\n",
        "question_count = df['text'].str.contains('\\?', na=False).sum()\n",
        "caps_count = df['text'].str.contains('[A-Z]{3,}', na=False).sum()\n",
        "\n",
        "print(f\"Tweets with exclamation marks: {exclamation_count} ({(exclamation_count/len(df)*100):.1f}%)\")\n",
        "print(f\"Tweets with question marks: {question_count} ({(question_count/len(df)*100):.1f}%)\")\n",
        "print(f\"Tweets with CAPS words: {caps_count} ({(caps_count/len(df)*100):.1f}%)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2DkFc3BeBSVU",
        "outputId": "0aa5063f-fd6b-49c8-b362-2fa958b65890"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Text Content Analysis:\n",
            "=====================\n",
            "Sample tweets by sentiment:\n",
            "\n",
            "Positive tweets:\n",
            "1. @VirginAmerica plus you've added commercials to the experience... tacky.\n",
            "2. @VirginAmerica yes, nearly every time I fly VX this “ear worm” won’t go away :)\n",
            "3. @virginamerica Well, I didn't…but NOW I DO! :-D\n",
            "\n",
            "Neutral tweets:\n",
            "1. @VirginAmerica What @dhepburn said.\n",
            "2. @VirginAmerica I didn't today... Must mean I need to take another trip!\n",
            "3. @VirginAmerica Really missed a prime opportunity for Men Without Hats parody, there. https://t.co/mWpG7grEZP\n",
            "\n",
            "Negative tweets:\n",
            "1. @VirginAmerica it's really aggressive to blast obnoxious \"entertainment\" in your guests' faces &amp; they have little recourse\n",
            "2. @VirginAmerica and it's a really big bad thing about it\n",
            "3. @VirginAmerica seriously would pay $30 a flight for seats that didn't have this playing.\n",
            "it's really the only bad thing about flying VA\n",
            "\n",
            "Text Pattern Analysis:\n",
            "=======================\n",
            "Tweets with mentions (@): 14640 (100.0%)\n",
            "Tweets with hashtags (#): 2489 (17.0%)\n",
            "Tweets with URLs: 1173 (8.0%)\n",
            "Tweets with exclamation marks: 3226 (22.0%)\n",
            "Tweets with question marks: 3675 (25.1%)\n",
            "Tweets with CAPS words: 5665 (38.7%)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 8. Key Findings and Summary\n",
        "\n",
        "Summarize the main findings from the exploratory data analysis."
      ],
      "metadata": {
        "id": "dJUVS8_VBhFT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Summary of key findings\n",
        "print(\"DATASET UNDERSTANDING & EDA - KEY FINDINGS\")\n",
        "print(\"=\"*45)\n",
        "\n",
        "print(\"\\n1. DATASET OVERVIEW:\")\n",
        "print(f\"   - Total samples: {len(df):,}\")\n",
        "print(f\"   - Features: {len(df.columns)}\")\n",
        "print(f\"   - Target variable: airline_sentiment\")\n",
        "print(f\"   - Classes: {list(df['airline_sentiment'].unique())}\")\n",
        "\n",
        "print(\"\\n2. DATA QUALITY:\")\n",
        "missing_total = df.isnull().sum().sum()\n",
        "duplicate_total = df.duplicated().sum()\n",
        "print(f\"   - Missing values: {missing_total}\")\n",
        "print(f\"   - Duplicate rows: {duplicate_total}\")\n",
        "print(f\"   - Text duplicates: {df['text'].duplicated().sum()}\")\n",
        "\n",
        "print(\"\\n3. SENTIMENT DISTRIBUTION:\")\n",
        "for sentiment, count in df['airline_sentiment'].value_counts().items():\n",
        "    percentage = (count / len(df)) * 100\n",
        "    print(f\"   - {sentiment}: {count:,} ({percentage:.1f}%)\")\n",
        "\n",
        "imbalance_ratio = df['airline_sentiment'].value_counts().max() / df['airline_sentiment'].value_counts().min()\n",
        "print(f\"   - Class imbalance ratio: {imbalance_ratio:.2f}:1\")\n",
        "\n",
        "print(\"\\n4. TEXT CHARACTERISTICS:\")\n",
        "print(f\"   - Average text length: {df['text_length'].mean():.1f} characters\")\n",
        "print(f\"   - Average word count: {df['word_count'].mean():.1f} words\")\n",
        "print(f\"   - Text length range: {df['text_length'].min()} - {df['text_length'].max()} characters\")\n",
        "\n",
        "print(\"\\n5. CONTENT PATTERNS:\")\n",
        "mentions_pct = (df['text'].str.contains('@', na=False).sum() / len(df)) * 100\n",
        "hashtags_pct = (df['text'].str.contains('#', na=False).sum() / len(df)) * 100\n",
        "urls_pct = (df['text'].str.contains('http', na=False).sum() / len(df)) * 100\n",
        "print(f\"   - Tweets with mentions: {mentions_pct:.1f}%\")\n",
        "print(f\"   - Tweets with hashtags: {hashtags_pct:.1f}%\")\n",
        "print(f\"   - Tweets with URLs: {urls_pct:.1f}%\")\n",
        "\n",
        "print(\"\\n6. AIRLINES:\")\n",
        "print(f\"   - Number of airlines: {df['airline'].nunique()}\")\n",
        "print(f\"   - Most mentioned: {df['airline'].value_counts().index[0]}\")\n",
        "\n",
        "print(\"\\n7. RECOMMENDATIONS FOR PREPROCESSING:\")\n",
        "print(\"   - Handle class imbalance with appropriate techniques\")\n",
        "print(\"   - Clean text data (mentions, URLs, special characters)\")\n",
        "print(\"   - Consider text length variations in feature engineering\")\n",
        "print(\"   - Remove or handle duplicate texts\")\n",
        "print(\"   - Implement stratified splitting to maintain class distribution\")\n",
        "\n",
        "print(f\"\\nDataset is ready for Phase 2: Data Cleaning and Preprocessing!\")\n",
        "print(\"=\"*45)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ttCYjvnBe2z",
        "outputId": "7c727b64-d587-41e8-c33e-5adce4b3ad7f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DATASET UNDERSTANDING & EDA - KEY FINDINGS\n",
            "=============================================\n",
            "\n",
            "1. DATASET OVERVIEW:\n",
            "   - Total samples: 14,640\n",
            "   - Features: 17\n",
            "   - Target variable: airline_sentiment\n",
            "   - Classes: ['neutral', 'positive', 'negative']\n",
            "\n",
            "2. DATA QUALITY:\n",
            "   - Missing values: 61962\n",
            "   - Duplicate rows: 36\n",
            "   - Text duplicates: 213\n",
            "\n",
            "3. SENTIMENT DISTRIBUTION:\n",
            "   - negative: 9,178 (62.7%)\n",
            "   - neutral: 3,099 (21.2%)\n",
            "   - positive: 2,363 (16.1%)\n",
            "   - Class imbalance ratio: 3.88:1\n",
            "\n",
            "4. TEXT CHARACTERISTICS:\n",
            "   - Average text length: 103.8 characters\n",
            "   - Average word count: 17.7 words\n",
            "   - Text length range: 12 - 186 characters\n",
            "\n",
            "5. CONTENT PATTERNS:\n",
            "   - Tweets with mentions: 100.0%\n",
            "   - Tweets with hashtags: 17.0%\n",
            "   - Tweets with URLs: 8.0%\n",
            "\n",
            "6. AIRLINES:\n",
            "   - Number of airlines: 6\n",
            "   - Most mentioned: United\n",
            "\n",
            "7. RECOMMENDATIONS FOR PREPROCESSING:\n",
            "   - Handle class imbalance with appropriate techniques\n",
            "   - Clean text data (mentions, URLs, special characters)\n",
            "   - Consider text length variations in feature engineering\n",
            "   - Remove or handle duplicate texts\n",
            "   - Implement stratified splitting to maintain class distribution\n",
            "\n",
            "Dataset is ready for Phase 2: Data Cleaning and Preprocessing!\n",
            "=============================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Phase 2: Data Cleaning and Preprocessing\n",
        "\n",
        "Now that we understand our dataset, let's clean and prepare the data for feature engineering and modeling. This phase handles missing values, duplicates, and basic text cleaning that both traditional and deep learning models will benefit from."
      ],
      "metadata": {
        "id": "Ho07hBy3E8-H"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 9. Handle Missing Values\n",
        "\n",
        "Based on our EDA findings, let's handle any missing values in the dataset."
      ],
      "metadata": {
        "id": "IjMrR9P6FM0T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Handle missing values\n",
        "print(\"PHASE 2: DATA CLEANING - Missing Values\")\n",
        "print(\"=\"*40)\n",
        "\n",
        "# Check current missing values\n",
        "print(\"Current missing values by column:\")\n",
        "missing_before = df.isnull().sum()\n",
        "print(missing_before[missing_before > 0])\n",
        "\n",
        "if missing_before.sum() == 0:\n",
        "    print(\"No missing values found - dataset is clean!\")\n",
        "else:\n",
        "    # Handle missing values based on column type and importance\n",
        "    print(f\"\\nHandling missing values...\")\n",
        "\n",
        "    # For text columns - fill with empty string or drop\n",
        "    if 'text' in df.columns and df['text'].isnull().sum() > 0:\n",
        "        print(f\"Removing {df['text'].isnull().sum()} rows with missing text\")\n",
        "        df = df.dropna(subset=['text'])\n",
        "\n",
        "    # For sentiment column - this is critical, drop if missing\n",
        "    if 'airline_sentiment' in df.columns and df['airline_sentiment'].isnull().sum() > 0:\n",
        "        print(f\"Removing {df['airline_sentiment'].isnull().sum()} rows with missing sentiment\")\n",
        "        df = df.dropna(subset=['airline_sentiment'])\n",
        "\n",
        "    # For other columns, handle based on their importance\n",
        "    # Fill categorical missing values with 'Unknown' where appropriate\n",
        "    categorical_cols = ['airline', 'negativereason', 'airline_sentiment_gold', 'name']\n",
        "    for col in categorical_cols:\n",
        "        if col in df.columns and df[col].isnull().sum() > 0:\n",
        "            missing_count = df[col].isnull().sum()\n",
        "            print(f\"Filling {missing_count} missing values in '{col}' with 'Unknown'\")\n",
        "            df[col] = df[col].fillna('Unknown')\n",
        "\n",
        "    # For numerical columns, fill with median or appropriate value\n",
        "    numerical_cols = ['airline_sentiment_confidence', 'negativereason_confidence', 'retweet_count']\n",
        "    for col in numerical_cols:\n",
        "        if col in df.columns and df[col].isnull().sum() > 0:\n",
        "            missing_count = df[col].isnull().sum()\n",
        "            median_val = df[col].median()\n",
        "            print(f\"Filling {missing_count} missing values in '{col}' with median: {median_val}\")\n",
        "            df[col] = df[col].fillna(median_val)\n",
        "\n",
        "# Check missing values after cleaning\n",
        "print(f\"\\nMissing values after cleaning:\")\n",
        "missing_after = df.isnull().sum()\n",
        "print(missing_after[missing_after > 0])\n",
        "\n",
        "if missing_after.sum() == 0:\n",
        "    print(\"All missing values handled successfully!\")\n",
        "\n",
        "print(f\"\\nDataset shape after missing value handling: {df.shape}\")\n",
        "print(f\"Rows removed: {len(df) - df.shape[0] if 'original_length' in locals() else 0}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dni-hMVqFHfL",
        "outputId": "f6cd57aa-c7b7-4594-ae4e-ddb6a7f5eee3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PHASE 2: DATA CLEANING - Missing Values\n",
            "========================================\n",
            "Current missing values by column:\n",
            "negativereason                5462\n",
            "negativereason_confidence     4118\n",
            "airline_sentiment_gold       14600\n",
            "negativereason_gold          14608\n",
            "tweet_coord                  13621\n",
            "tweet_location                4733\n",
            "user_timezone                 4820\n",
            "dtype: int64\n",
            "\n",
            "Handling missing values...\n",
            "Filling 5462 missing values in 'negativereason' with 'Unknown'\n",
            "Filling 14600 missing values in 'airline_sentiment_gold' with 'Unknown'\n",
            "Filling 4118 missing values in 'negativereason_confidence' with median: 0.6706\n",
            "\n",
            "Missing values after cleaning:\n",
            "negativereason_gold    14608\n",
            "tweet_coord            13621\n",
            "tweet_location          4733\n",
            "user_timezone           4820\n",
            "dtype: int64\n",
            "\n",
            "Dataset shape after missing value handling: (14640, 17)\n",
            "Rows removed: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 10. Remove Duplicate Data\n",
        "\n",
        "Remove duplicate rows and handle duplicate text content to ensure data quality."
      ],
      "metadata": {
        "id": "sDVMUCCXFVcz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove duplicates\n",
        "print(\"DUPLICATE REMOVAL\")\n",
        "print(\"=\"*17)\n",
        "\n",
        "# Store original shape\n",
        "original_shape = df.shape\n",
        "print(f\"Original dataset shape: {original_shape}\")\n",
        "\n",
        "# Remove exact duplicate rows\n",
        "duplicate_rows = df.duplicated().sum()\n",
        "print(f\"Exact duplicate rows found: {duplicate_rows}\")\n",
        "\n",
        "if duplicate_rows > 0:\n",
        "    df_before = len(df)\n",
        "    df = df.drop_duplicates()\n",
        "    df_after = len(df)\n",
        "    print(f\"Removed {df_before - df_after} duplicate rows\")\n",
        "else:\n",
        "    print(\"No exact duplicate rows found\")\n",
        "\n",
        "# Handle duplicate text content\n",
        "duplicate_texts = df['text'].duplicated().sum()\n",
        "print(f\"\\nDuplicate text entries found: {duplicate_texts}\")\n",
        "\n",
        "if duplicate_texts > 0:\n",
        "    print(\"Analyzing duplicate texts...\")\n",
        "\n",
        "    # Show most common duplicates\n",
        "    duplicate_text_counts = df[df['text'].duplicated(keep=False)]['text'].value_counts().head()\n",
        "    print(f\"\\nMost common duplicate texts:\")\n",
        "    for text, count in duplicate_text_counts.items():\n",
        "        print(f\"  '{text[:50]}...' appears {count} times\")\n",
        "\n",
        "    # Option 1: Keep first occurrence of duplicate texts\n",
        "    print(f\"\\nRemoving duplicate texts, keeping first occurrence...\")\n",
        "    df_before_text = len(df)\n",
        "    df = df.drop_duplicates(subset=['text'], keep='first')\n",
        "    df_after_text = len(df)\n",
        "    print(f\"Removed {df_before_text - df_after_text} rows with duplicate text content\")\n",
        "\n",
        "print(f\"\\nFinal dataset shape after duplicate removal: {df.shape}\")\n",
        "print(f\"Total rows removed: {original_shape[0] - df.shape[0]}\")\n",
        "print(f\"Data retention rate: {(df.shape[0] / original_shape[0]) * 100:.2f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kZ-v_7C3FTX8",
        "outputId": "08a9ba0c-3f33-4662-9441-5dfc00237375"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DUPLICATE REMOVAL\n",
            "=================\n",
            "Original dataset shape: (14640, 17)\n",
            "Exact duplicate rows found: 36\n",
            "Removed 36 duplicate rows\n",
            "\n",
            "Duplicate text entries found: 177\n",
            "Analyzing duplicate texts...\n",
            "\n",
            "Most common duplicate texts:\n",
            "  '@united thanks...' appears 6 times\n",
            "  '@JetBlue thanks!...' appears 5 times\n",
            "  '@SouthwestAir sent...' appears 5 times\n",
            "  '@AmericanAir thanks...' appears 5 times\n",
            "  '@united thank you!...' appears 4 times\n",
            "\n",
            "Removing duplicate texts, keeping first occurrence...\n",
            "Removed 177 rows with duplicate text content\n",
            "\n",
            "Final dataset shape after duplicate removal: (14427, 17)\n",
            "Total rows removed: 213\n",
            "Data retention rate: 98.55%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 11. Basic Text Cleaning\n",
        "\n",
        "Clean the text data by handling HTML entities, special characters, and basic formatting issues."
      ],
      "metadata": {
        "id": "9aYXOS-7Fcui"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Basic text cleaning\n",
        "print(\"BASIC TEXT CLEANING\")\n",
        "print(\"=\"*19)\n",
        "\n",
        "# Create a backup of original text\n",
        "df['original_text'] = df['text'].copy()\n",
        "\n",
        "# Show sample of original texts\n",
        "print(\"Sample original texts:\")\n",
        "for i, text in enumerate(df['text'].head(3), 1):\n",
        "    print(f\"{i}. {text}\")\n",
        "\n",
        "print(f\"\\nCleaning text data...\")\n",
        "\n",
        "# Clean HTML entities\n",
        "import html\n",
        "df['text'] = df['text'].apply(lambda x: html.unescape(x) if pd.notna(x) else x)\n",
        "print(\"✓ Decoded HTML entities (&amp;, &lt;, &gt;, etc.)\")\n",
        "\n",
        "# Remove or replace specific patterns\n",
        "# Fix common text encoding issues\n",
        "df['text'] = df['text'].str.replace('&amp;', '&', regex=False)\n",
        "df['text'] = df['text'].str.replace('&lt;', '<', regex=False)\n",
        "df['text'] = df['text'].str.replace('&gt;', '>', regex=False)\n",
        "df['text'] = df['text'].str.replace('&quot;', '\"', regex=False)\n",
        "print(\"✓ Fixed common encoding issues\")\n",
        "\n",
        "# Remove excessive whitespace\n",
        "df['text'] = df['text'].str.replace(r'\\s+', ' ', regex=True)\n",
        "df['text'] = df['text'].str.strip()\n",
        "print(\"✓ Normalized whitespace\")\n",
        "\n",
        "# Handle newlines and tabs\n",
        "df['text'] = df['text'].str.replace(r'[\\n\\t\\r]', ' ', regex=True)\n",
        "print(\"✓ Removed newlines and tabs\")\n",
        "\n",
        "# Remove very short texts (likely not meaningful)\n",
        "min_length = 3\n",
        "short_texts = (df['text'].str.len() < min_length).sum()\n",
        "if short_texts > 0:\n",
        "    print(f\"Found {short_texts} texts shorter than {min_length} characters\")\n",
        "    df = df[df['text'].str.len() >= min_length]\n",
        "    print(f\"✓ Removed texts shorter than {min_length} characters\")\n",
        "\n",
        "# Show sample of cleaned texts\n",
        "print(f\"\\nSample cleaned texts:\")\n",
        "for i, text in enumerate(df['text'].head(3), 1):\n",
        "    print(f\"{i}. {text}\")\n",
        "\n",
        "# Compare text lengths before and after cleaning\n",
        "original_avg_length = df['original_text'].str.len().mean()\n",
        "cleaned_avg_length = df['text'].str.len().mean()\n",
        "\n",
        "print(f\"\\nText cleaning summary:\")\n",
        "print(f\"Average text length before cleaning: {original_avg_length:.1f} characters\")\n",
        "print(f\"Average text length after cleaning: {cleaned_avg_length:.1f} characters\")\n",
        "print(f\"Length change: {((cleaned_avg_length - original_avg_length) / original_avg_length) * 100:+.1f}%\")\n",
        "print(f\"Final dataset shape: {df.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CisY1v7hFce7",
        "outputId": "b8fc0266-92d8-48f3-c3a2-347f43d7ba8d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BASIC TEXT CLEANING\n",
            "===================\n",
            "Sample original texts:\n",
            "1. @VirginAmerica What @dhepburn said.\n",
            "2. @VirginAmerica plus you've added commercials to the experience... tacky.\n",
            "3. @VirginAmerica I didn't today... Must mean I need to take another trip!\n",
            "\n",
            "Cleaning text data...\n",
            "✓ Decoded HTML entities (&amp;, &lt;, &gt;, etc.)\n",
            "✓ Fixed common encoding issues\n",
            "✓ Normalized whitespace\n",
            "✓ Removed newlines and tabs\n",
            "\n",
            "Sample cleaned texts:\n",
            "1. @VirginAmerica What @dhepburn said.\n",
            "2. @VirginAmerica plus you've added commercials to the experience... tacky.\n",
            "3. @VirginAmerica I didn't today... Must mean I need to take another trip!\n",
            "\n",
            "Text cleaning summary:\n",
            "Average text length before cleaning: 104.2 characters\n",
            "Average text length after cleaning: 103.8 characters\n",
            "Length change: -0.4%\n",
            "Final dataset shape: (14427, 18)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 12. Data Quality Validation\n",
        "\n",
        "Validate the cleaned dataset and ensure data quality for modeling."
      ],
      "metadata": {
        "id": "AH0aD8EcFnAb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Data quality validation\n",
        "print(\"DATA QUALITY VALIDATION\")\n",
        "print(\"=\"*23)\n",
        "\n",
        "# Final data quality checks\n",
        "print(\"1. Dataset Overview after cleaning:\")\n",
        "print(f\"   Shape: {df.shape}\")\n",
        "print(f\"   Memory usage: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB\")\n",
        "\n",
        "print(\"\\n2. Missing Values Check:\")\n",
        "missing_final = df.isnull().sum()\n",
        "if missing_final.sum() == 0:\n",
        "    print(\"   ✓ No missing values\")\n",
        "else:\n",
        "    print(\"   ⚠ Missing values still present:\")\n",
        "    print(missing_final[missing_final > 0])\n",
        "\n",
        "print(\"\\n3. Text Quality Checks:\")\n",
        "empty_texts = (df['text'].str.len() == 0).sum()\n",
        "print(f\"   Empty texts: {empty_texts}\")\n",
        "\n",
        "very_short_texts = (df['text'].str.len() < 5).sum()\n",
        "print(f\"   Very short texts (< 5 chars): {very_short_texts}\")\n",
        "\n",
        "very_long_texts = (df['text'].str.len() > 500).sum()\n",
        "print(f\"   Very long texts (> 500 chars): {very_long_texts}\")\n",
        "\n",
        "print(\"\\n4. Sentiment Distribution after cleaning:\")\n",
        "sentiment_counts_clean = df['airline_sentiment'].value_counts()\n",
        "print(sentiment_counts_clean)\n",
        "\n",
        "# Calculate new class imbalance ratio\n",
        "imbalance_ratio_clean = sentiment_counts_clean.max() / sentiment_counts_clean.min()\n",
        "print(f\"   Class imbalance ratio: {imbalance_ratio_clean:.2f}:1\")\n",
        "\n",
        "print(\"\\n5. Text Statistics after cleaning:\")\n",
        "df['text_length_clean'] = df['text'].str.len()\n",
        "df['word_count_clean'] = df['text'].str.split().str.len()\n",
        "\n",
        "print(f\"   Average text length: {df['text_length_clean'].mean():.1f} characters\")\n",
        "print(f\"   Average word count: {df['word_count_clean'].mean():.1f} words\")\n",
        "print(f\"   Text length range: {df['text_length_clean'].min()} - {df['text_length_clean'].max()}\")\n",
        "\n",
        "print(\"\\n6. Sample cleaned data:\")\n",
        "print(\"   Positive example:\", df[df['airline_sentiment'] == 'positive']['text'].iloc[0])\n",
        "print(\"   Negative example:\", df[df['airline_sentiment'] == 'negative']['text'].iloc[0])\n",
        "print(\"   Neutral example:\", df[df['airline_sentiment'] == 'neutral']['text'].iloc[0])\n",
        "\n",
        "print(f\"\\n✓ Data cleaning completed successfully!\")\n",
        "print(f\"Dataset is ready for Phase 3: Text Preprocessing Pipeline\")\n",
        "print(\"=\"*50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gEKzE0XLFktz",
        "outputId": "6b95bec9-31fb-48d6-9911-c3844ed4b619"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DATA QUALITY VALIDATION\n",
            "=======================\n",
            "1. Dataset Overview after cleaning:\n",
            "   Shape: (14427, 18)\n",
            "   Memory usage: 12.86 MB\n",
            "\n",
            "2. Missing Values Check:\n",
            "   ⚠ Missing values still present:\n",
            "negativereason_gold    14395\n",
            "tweet_coord            13424\n",
            "tweet_location          4667\n",
            "user_timezone           4750\n",
            "dtype: int64\n",
            "\n",
            "3. Text Quality Checks:\n",
            "   Empty texts: 0\n",
            "   Very short texts (< 5 chars): 0\n",
            "   Very long texts (> 500 chars): 0\n",
            "\n",
            "4. Sentiment Distribution after cleaning:\n",
            "airline_sentiment\n",
            "negative    9080\n",
            "neutral     3057\n",
            "positive    2290\n",
            "Name: count, dtype: int64\n",
            "   Class imbalance ratio: 3.97:1\n",
            "\n",
            "5. Text Statistics after cleaning:\n",
            "   Average text length: 103.8 characters\n",
            "   Average word count: 17.7 words\n",
            "   Text length range: 12 - 182\n",
            "\n",
            "6. Sample cleaned data:\n",
            "   Positive example: @VirginAmerica plus you've added commercials to the experience... tacky.\n",
            "   Negative example: @VirginAmerica it's really aggressive to blast obnoxious \"entertainment\" in your guests' faces & they have little recourse\n",
            "   Neutral example: @VirginAmerica What @dhepburn said.\n",
            "\n",
            "✓ Data cleaning completed successfully!\n",
            "Dataset is ready for Phase 3: Text Preprocessing Pipeline\n",
            "==================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Phase 3: Text Preprocessing Pipeline\n",
        "\n",
        "Now we'll implement comprehensive text preprocessing that will prepare the text data for both traditional machine learning models and deep learning models. This includes tokenization, normalization, stopword removal, and other text processing techniques."
      ],
      "metadata": {
        "id": "-MD4vcGRH7bq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 13. Import Text Processing Libraries\n",
        "\n",
        "Import additional libraries needed for advanced text preprocessing."
      ],
      "metadata": {
        "id": "kAjGv_1zIACS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import text processing libraries\n",
        "print(\"PHASE 3: TEXT PREPROCESSING PIPELINE\")\n",
        "print(\"=\"*36)\n",
        "\n",
        "# Additional text processing imports\n",
        "import string\n",
        "from collections import Counter\n",
        "import re\n",
        "\n",
        "# Try to import NLTK for advanced text processing\n",
        "try:\n",
        "    import nltk\n",
        "    print(\"✓ NLTK imported successfully\")\n",
        "\n",
        "    # Download required NLTK data if not present\n",
        "    try:\n",
        "        nltk.data.find('tokenizers/punkt')\n",
        "        print(\"✓ NLTK punkt tokenizer available\")\n",
        "    except LookupError:\n",
        "        print(\"Downloading NLTK punkt tokenizer...\")\n",
        "        nltk.download('punkt', quiet=True)\n",
        "\n",
        "    # Download 'punkt_tab' as suggested by the error\n",
        "    try:\n",
        "        nltk.data.find('tokenizers/punkt_tab')\n",
        "        print(\"✓ NLTK punkt_tab tokenizer available\")\n",
        "    except LookupError:\n",
        "        print(\"Downloading NLTK punkt_tab tokenizer...\")\n",
        "        nltk.download('punkt_tab', quiet=True)\n",
        "\n",
        "    try:\n",
        "        nltk.data.find('corpora/stopwords')\n",
        "        print(\"✓ NLTK stopwords available\")\n",
        "    except LookupError:\n",
        "        print(\"Downloading NLTK stopwords...\")\n",
        "        nltk.download('stopwords', quiet=True)\n",
        "\n",
        "    try:\n",
        "        nltk.data.find('corpora/wordnet')\n",
        "        print(\"✓ NLTK wordnet available\")\n",
        "    except LookupError:\n",
        "        print(\"Downloading NLTK wordnet...\")\n",
        "        nltk.download('wordnet', quiet=True)\n",
        "\n",
        "    from nltk.corpus import stopwords\n",
        "    from nltk.tokenize import word_tokenize\n",
        "    from nltk.stem import WordNetLemmatizer\n",
        "    from nltk.stem import PorterStemmer\n",
        "\n",
        "    NLTK_AVAILABLE = True\n",
        "    print(\"✓ All NLTK components loaded successfully\")\n",
        "\n",
        "except ImportError:\n",
        "    print(\"⚠ NLTK not available - using basic text processing\")\n",
        "    NLTK_AVAILABLE = False\n",
        "\n",
        "print(\"\\nText processing libraries ready!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F3MxWLLCH85q",
        "outputId": "9ed4a669-ba9e-4b43-d26d-aa5469e91c99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PHASE 3: TEXT PREPROCESSING PIPELINE\n",
            "====================================\n",
            "✓ NLTK imported successfully\n",
            "✓ NLTK punkt tokenizer available\n",
            "Downloading NLTK punkt_tab tokenizer...\n",
            "✓ NLTK stopwords available\n",
            "Downloading NLTK wordnet...\n",
            "✓ All NLTK components loaded successfully\n",
            "\n",
            "Text processing libraries ready!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Text normalization\n",
        "print(\"TEXT NORMALIZATION\")\n",
        "print(\"=\"*18)\n",
        "\n",
        "# Create a copy for preprocessing\n",
        "df['text_normalized'] = df['text'].copy()\n",
        "\n",
        "# Show sample before normalization\n",
        "print(\"Sample texts before normalization:\")\n",
        "for i, text in enumerate(df['text_normalized'].head(3), 1):\n",
        "    print(f\"{i}. {text}\")\n",
        "\n",
        "print(f\"\\nApplying text normalization...\")\n",
        "\n",
        "# Convert to lowercase\n",
        "df['text_normalized'] = df['text_normalized'].str.lower()\n",
        "print(\"✓ Converted to lowercase\")\n",
        "\n",
        "# Remove URLs\n",
        "df['text_normalized'] = df['text_normalized'].str.replace(r'http\\S+|www\\S+|https\\S+', '', regex=True)\n",
        "print(\"✓ Removed URLs\")\n",
        "\n",
        "# Remove mentions (@username)\n",
        "df['text_normalized'] = df['text_normalized'].str.replace(r'@\\w+', '', regex=True)\n",
        "print(\"✓ Removed mentions (@username)\")\n",
        "\n",
        "# Remove hashtags (but keep the text)\n",
        "df['text_normalized'] = df['text_normalized'].str.replace(r'#(\\w+)', r'\\1', regex=True)\n",
        "print(\"✓ Processed hashtags (kept text, removed #)\")\n",
        "\n",
        "# Remove numbers (optional - might want to keep for some analyses)\n",
        "df['text_normalized'] = df['text_normalized'].str.replace(r'\\d+', '', regex=True)\n",
        "print(\"✓ Removed numbers\")\n",
        "\n",
        "# Remove extra punctuation but keep sentence structure\n",
        "# Keep some punctuation that might be important for sentiment (!, ?)\n",
        "df['text_normalized'] = df['text_normalized'].str.replace(r'[^\\w\\s!?.]', ' ', regex=True)\n",
        "print(\"✓ Cleaned punctuation (kept !, ?, .)\")\n",
        "\n",
        "# Remove extra whitespace (again, after all cleaning)\n",
        "df['text_normalized'] = df['text_normalized'].str.replace(r'\\s+', ' ', regex=True)\n",
        "df['text_normalized'] = df['text_normalized'].str.strip()\n",
        "print(\"✓ Normalized whitespace\")\n",
        "\n",
        "# Show sample after normalization\n",
        "print(f\"\\nSample texts after normalization:\")\n",
        "for i, text in enumerate(df['text_normalized'].head(3), 1):\n",
        "    print(f\"{i}. {text}\")\n",
        "\n",
        "# Compare lengths\n",
        "original_avg = df['text'].str.len().mean()\n",
        "normalized_avg = df['text_normalized'].str.len().mean()\n",
        "print(f\"\\nNormalization impact:\")\n",
        "print(f\"Average length before: {original_avg:.1f} characters\")\n",
        "print(f\"Average length after: {normalized_avg:.1f} characters\")\n",
        "print(f\"Length reduction: {((original_avg - normalized_avg) / original_avg) * 100:.1f}%\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nh252EunIN46",
        "outputId": "69e59662-7ff7-4257-db9e-ac0b0f2afd27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TEXT NORMALIZATION\n",
            "==================\n",
            "Sample texts before normalization:\n",
            "1. @VirginAmerica What @dhepburn said.\n",
            "2. @VirginAmerica plus you've added commercials to the experience... tacky.\n",
            "3. @VirginAmerica I didn't today... Must mean I need to take another trip!\n",
            "\n",
            "Applying text normalization...\n",
            "✓ Converted to lowercase\n",
            "✓ Removed URLs\n",
            "✓ Removed mentions (@username)\n",
            "✓ Processed hashtags (kept text, removed #)\n",
            "✓ Removed numbers\n",
            "✓ Cleaned punctuation (kept !, ?, .)\n",
            "✓ Normalized whitespace\n",
            "\n",
            "Sample texts after normalization:\n",
            "1. what said.\n",
            "2. plus you ve added commercials to the experience... tacky.\n",
            "3. i didn t today... must mean i need to take another trip!\n",
            "\n",
            "Normalization impact:\n",
            "Average length before: 103.8 characters\n",
            "Average length after: 86.7 characters\n",
            "Length reduction: 16.4%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tokenization and stopword removal\n",
        "print(\"TOKENIZATION AND STOPWORD REMOVAL\")\n",
        "print(\"=\"*33)\n",
        "\n",
        "def tokenize_and_remove_stopwords(text):\n",
        "    \"\"\"\n",
        "    Tokenize text and remove stopwords while preserving sentiment-relevant words\n",
        "    \"\"\"\n",
        "    if pd.isna(text) or text == '':\n",
        "        return []\n",
        "\n",
        "    if NLTK_AVAILABLE:\n",
        "        # Use NLTK tokenization\n",
        "        tokens = word_tokenize(text)\n",
        "\n",
        "        # Get English stopwords\n",
        "        stop_words = set(stopwords.words('english'))\n",
        "\n",
        "        # Remove some sentiment-relevant words from stopwords\n",
        "        # These words might be important for sentiment analysis\n",
        "        sentiment_words = {'not', 'no', 'never', 'none', 'nothing', 'neither', 'nobody', 'nowhere',\n",
        "                          'very', 'really', 'quite', 'rather', 'extremely', 'incredibly',\n",
        "                          'but', 'however', 'although', 'though', 'yet'}\n",
        "        stop_words = stop_words - sentiment_words\n",
        "\n",
        "    else:\n",
        "        # Basic tokenization if NLTK not available\n",
        "        tokens = text.split()\n",
        "\n",
        "        # Basic stopwords list\n",
        "        stop_words = {'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours',\n",
        "                     'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers',\n",
        "                     'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves',\n",
        "                     'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are',\n",
        "                     'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does',\n",
        "                     'did', 'doing', 'a', 'an', 'the', 'and', 'or', 'as', 'until', 'while', 'of', 'at',\n",
        "                     'by', 'for', 'with', 'through', 'during', 'before', 'after', 'above', 'below', 'up',\n",
        "                     'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once'}\n",
        "\n",
        "    # Filter tokens: remove stopwords and short words\n",
        "    filtered_tokens = [token for token in tokens\n",
        "                      if token.lower() not in stop_words\n",
        "                      and len(token) > 2\n",
        "                      and token.isalpha()]\n",
        "\n",
        "    return filtered_tokens\n",
        "\n",
        "print(\"Applying tokenization and stopword removal...\")\n",
        "\n",
        "# Apply tokenization\n",
        "df['tokens'] = df['text_normalized'].apply(tokenize_and_remove_stopwords)\n",
        "\n",
        "# Create processed text by joining tokens back\n",
        "df['text_processed'] = df['tokens'].apply(lambda x: ' '.join(x) if x else '')\n",
        "\n",
        "print(\"✓ Tokenization completed\")\n",
        "print(\"✓ Stopwords removed\")\n",
        "print(\"✓ Short words (≤2 chars) removed\")\n",
        "print(\"✓ Non-alphabetic tokens removed\")\n",
        "\n",
        "# Show statistics\n",
        "print(f\"\\nTokenization statistics:\")\n",
        "total_tokens_before = df['text_normalized'].str.split().str.len().sum()\n",
        "total_tokens_after = df['tokens'].str.len().sum()\n",
        "print(f\"Total tokens before: {total_tokens_before:,}\")\n",
        "print(f\"Total tokens after: {total_tokens_after:,}\")\n",
        "print(f\"Tokens removed: {total_tokens_before - total_tokens_after:,} ({((total_tokens_before - total_tokens_after)/total_tokens_before)*100:.1f}%)\")\n",
        "\n",
        "# Average tokens per text\n",
        "avg_tokens_before = df['text_normalized'].str.split().str.len().mean()\n",
        "avg_tokens_after = df['tokens'].str.len().mean()\n",
        "print(f\"Average tokens per text before: {avg_tokens_before:.1f}\")\n",
        "print(f\"Average tokens per text after: {avg_tokens_after:.1f}\")\n",
        "\n",
        "# Show examples\n",
        "print(f\"\\nSample processed texts:\")\n",
        "for i, (original, processed) in enumerate(zip(df['text'].head(3), df['text_processed'].head(3)), 1):\n",
        "    print(f\"{i}. Original: {original}\")\n",
        "    print(f\"   Processed: {processed}\")\n",
        "    print()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rQzgc0nBIQ56",
        "outputId": "da6b5b26-44b1-4a26-e36f-5e2a4919f631"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TOKENIZATION AND STOPWORD REMOVAL\n",
            "=================================\n",
            "Applying tokenization and stopword removal...\n",
            "✓ Tokenization completed\n",
            "✓ Stopwords removed\n",
            "✓ Short words (≤2 chars) removed\n",
            "✓ Non-alphabetic tokens removed\n",
            "\n",
            "Tokenization statistics:\n",
            "Total tokens before: 238,200\n",
            "Total tokens after: 121,954\n",
            "Tokens removed: 116,246 (48.8%)\n",
            "Average tokens per text before: 16.5\n",
            "Average tokens per text after: 8.5\n",
            "\n",
            "Sample processed texts:\n",
            "1. Original: @VirginAmerica What @dhepburn said.\n",
            "   Processed: said\n",
            "\n",
            "2. Original: @VirginAmerica plus you've added commercials to the experience... tacky.\n",
            "   Processed: plus added commercials experience tacky\n",
            "\n",
            "3. Original: @VirginAmerica I didn't today... Must mean I need to take another trip!\n",
            "   Processed: today must mean need take another trip\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Lemmatization and stemming\n",
        "print(\"LEMMATIZATION AND STEMMING\")\n",
        "print(\"=\"*26)\n",
        "\n",
        "def apply_lemmatization(tokens):\n",
        "    \"\"\"Apply lemmatization to tokens\"\"\"\n",
        "    if not tokens:\n",
        "        return []\n",
        "\n",
        "    if NLTK_AVAILABLE:\n",
        "        lemmatizer = WordNetLemmatizer()\n",
        "        return [lemmatizer.lemmatize(token) for token in tokens]\n",
        "    else:\n",
        "        # If NLTK not available, return original tokens\n",
        "        return tokens\n",
        "\n",
        "def apply_stemming(tokens):\n",
        "    \"\"\"Apply stemming to tokens\"\"\"\n",
        "    if not tokens:\n",
        "        return []\n",
        "\n",
        "    if NLTK_AVAILABLE:\n",
        "        stemmer = PorterStemmer()\n",
        "        return [stemmer.stem(token) for token in tokens]\n",
        "    else:\n",
        "        # Basic stemming rules if NLTK not available\n",
        "        stemmed = []\n",
        "        for token in tokens:\n",
        "            # Simple stemming rules\n",
        "            if token.endswith('ing'):\n",
        "                stemmed.append(token[:-3])\n",
        "            elif token.endswith('ed'):\n",
        "                stemmed.append(token[:-2])\n",
        "            elif token.endswith('er'):\n",
        "                stemmed.append(token[:-2])\n",
        "            elif token.endswith('est'):\n",
        "                stemmed.append(token[:-3])\n",
        "            else:\n",
        "                stemmed.append(token)\n",
        "        return stemmed\n",
        "\n",
        "print(\"Applying lemmatization...\")\n",
        "df['tokens_lemmatized'] = df['tokens'].apply(apply_lemmatization)\n",
        "df['text_lemmatized'] = df['tokens_lemmatized'].apply(lambda x: ' '.join(x) if x else '')\n",
        "print(\"✓ Lemmatization completed\")\n",
        "\n",
        "print(\"Applying stemming...\")\n",
        "df['tokens_stemmed'] = df['tokens'].apply(apply_stemming)\n",
        "df['text_stemmed'] = df['tokens_stemmed'].apply(lambda x: ' '.join(x) if x else '')\n",
        "print(\"✓ Stemming completed\")\n",
        "\n",
        "# Compare results\n",
        "print(f\"\\nComparison of preprocessing approaches:\")\n",
        "print(\"=\"*40)\n",
        "\n",
        "sample_texts = df.head(3)\n",
        "for i, (idx, row) in enumerate(sample_texts.iterrows(), 1):\n",
        "    print(f\"Example {i}:\")\n",
        "    print(f\"  Original: {row['text']}\")\n",
        "    print(f\"  Processed: {row['text_processed']}\")\n",
        "    print(f\"  Lemmatized: {row['text_lemmatized']}\")\n",
        "    print(f\"  Stemmed: {row['text_stemmed']}\")\n",
        "    print()\n",
        "\n",
        "# Statistics comparison\n",
        "avg_len_processed = df['text_processed'].str.len().mean()\n",
        "avg_len_lemmatized = df['text_lemmatized'].str.len().mean()\n",
        "avg_len_stemmed = df['text_stemmed'].str.len().mean()\n",
        "\n",
        "print(f\"Average text length comparison:\")\n",
        "print(f\"  Processed (no lemma/stem): {avg_len_processed:.1f} characters\")\n",
        "print(f\"  Lemmatized: {avg_len_lemmatized:.1f} characters\")\n",
        "print(f\"  Stemmed: {avg_len_stemmed:.1f} characters\")\n",
        "\n",
        "# Token count comparison\n",
        "avg_tokens_processed = df['tokens'].str.len().mean()\n",
        "avg_tokens_lemmatized = df['tokens_lemmatized'].str.len().mean()\n",
        "avg_tokens_stemmed = df['tokens_stemmed'].str.len().mean()\n",
        "\n",
        "print(f\"\\nAverage token count comparison:\")\n",
        "print(f\"  Processed: {avg_tokens_processed:.1f} tokens\")\n",
        "print(f\"  Lemmatized: {avg_tokens_lemmatized:.1f} tokens\")\n",
        "print(f\"  Stemmed: {avg_tokens_stemmed:.1f} tokens\")\n",
        "\n",
        "print(f\"\\n✓ Both lemmatization and stemming completed\")\n",
        "print(f\"Choose the appropriate version based on your model requirements:\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8CLnz9bWJPGK",
        "outputId": "5c6e28f1-eba3-42a8-8cf0-1774f0be3cb5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LEMMATIZATION AND STEMMING\n",
            "==========================\n",
            "Applying lemmatization...\n",
            "✓ Lemmatization completed\n",
            "Applying stemming...\n",
            "✓ Stemming completed\n",
            "\n",
            "Comparison of preprocessing approaches:\n",
            "========================================\n",
            "Example 1:\n",
            "  Original: @VirginAmerica What @dhepburn said.\n",
            "  Processed: said\n",
            "  Lemmatized: said\n",
            "  Stemmed: said\n",
            "\n",
            "Example 2:\n",
            "  Original: @VirginAmerica plus you've added commercials to the experience... tacky.\n",
            "  Processed: plus added commercials experience tacky\n",
            "  Lemmatized: plus added commercial experience tacky\n",
            "  Stemmed: plu ad commerci experi tacki\n",
            "\n",
            "Example 3:\n",
            "  Original: @VirginAmerica I didn't today... Must mean I need to take another trip!\n",
            "  Processed: today must mean need take another trip\n",
            "  Lemmatized: today must mean need take another trip\n",
            "  Stemmed: today must mean need take anoth trip\n",
            "\n",
            "Average text length comparison:\n",
            "  Processed (no lemma/stem): 55.9 characters\n",
            "  Lemmatized: 55.2 characters\n",
            "  Stemmed: 49.5 characters\n",
            "\n",
            "Average token count comparison:\n",
            "  Processed: 8.5 tokens\n",
            "  Lemmatized: 8.5 tokens\n",
            "  Stemmed: 8.5 tokens\n",
            "\n",
            "✓ Both lemmatization and stemming completed\n",
            "Choose the appropriate version based on your model requirements:\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 17. Text Preprocessing Validation\n",
        "\n",
        "Validate the preprocessed text and analyze the most common words by sentiment."
      ],
      "metadata": {
        "id": "MVjnWKNvJaNK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Text preprocessing validation\n",
        "print(\"TEXT PREPROCESSING VALIDATION\")\n",
        "print(\"=\"*29)\n",
        "\n",
        "# Check for empty texts after preprocessing\n",
        "empty_processed = (df['text_processed'].str.len() == 0).sum()\n",
        "empty_lemmatized = (df['text_lemmatized'].str.len() == 0).sum()\n",
        "empty_stemmed = (df['text_stemmed'].str.len() == 0).sum()\n",
        "\n",
        "print(f\"Empty texts after preprocessing:\")\n",
        "print(f\"  Processed: {empty_processed}\")\n",
        "print(f\"  Lemmatized: {empty_lemmatized}\")\n",
        "print(f\"  Stemmed: {empty_stemmed}\")\n",
        "\n",
        "if empty_processed > 0:\n",
        "    print(f\"⚠ Warning: {empty_processed} texts became empty after preprocessing\")\n",
        "\n",
        "# Analyze most common words by sentiment\n",
        "print(f\"\\nMost common words by sentiment (using lemmatized text):\")\n",
        "print(\"=\"*50)\n",
        "\n",
        "def get_top_words(sentiment, n=10):\n",
        "    \"\"\"Get top n words for a specific sentiment\"\"\"\n",
        "    sentiment_texts = df[df['airline_sentiment'] == sentiment]['tokens_lemmatized']\n",
        "    all_words = []\n",
        "    for tokens in sentiment_texts:\n",
        "        all_words.extend(tokens)\n",
        "\n",
        "    word_counts = Counter(all_words)\n",
        "    return word_counts.most_common(n)\n",
        "\n",
        "# Analyze each sentiment\n",
        "sentiments = ['positive', 'negative', 'neutral']\n",
        "for sentiment in sentiments:\n",
        "    print(f\"\\nTop 15 words in {sentiment.upper()} tweets:\")\n",
        "    top_words = get_top_words(sentiment, 15)\n",
        "    for word, count in top_words:\n",
        "        print(f\"  {word}: {count}\")\n",
        "\n",
        "# Overall most common words\n",
        "print(f\"\\nOverall top 20 most common words:\")\n",
        "all_tokens = []\n",
        "for tokens in df['tokens_lemmatized']:\n",
        "    all_tokens.extend(tokens)\n",
        "\n",
        "overall_counts = Counter(all_tokens)\n",
        "for word, count in overall_counts.most_common(20):\n",
        "    print(f\"  {word}: {count}\")\n",
        "\n",
        "# Create vocabulary statistics\n",
        "unique_words = len(set(all_tokens))\n",
        "total_words = len(all_tokens)\n",
        "\n",
        "print(f\"\\nVocabulary statistics:\")\n",
        "print(f\"  Total words: {total_words:,}\")\n",
        "print(f\"  Unique words: {unique_words:,}\")\n",
        "print(f\"  Vocabulary diversity: {unique_words/total_words:.4f}\")\n",
        "\n",
        "# Text length distribution after preprocessing\n",
        "print(f\"\\nText length distribution after preprocessing:\")\n",
        "for col in ['text_processed', 'text_lemmatized', 'text_stemmed']:\n",
        "    avg_len = df[col].str.len().mean()\n",
        "    min_len = df[col].str.len().min()\n",
        "    max_len = df[col].str.len().max()\n",
        "    print(f\"  {col}: avg={avg_len:.1f}, min={min_len}, max={max_len}\")\n",
        "\n",
        "print(f\"\\n✓ Text preprocessing pipeline completed successfully!\")\n",
        "print(f\"Dataset ready for Phase 4: Feature Engineering and Embeddings\")\n",
        "print(\"=\"*60)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XEitvZNyJW0i",
        "outputId": "81a83bef-f5d2-4090-816c-e99d11bfd46f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TEXT PREPROCESSING VALIDATION\n",
            "=============================\n",
            "Empty texts after preprocessing:\n",
            "  Processed: 38\n",
            "  Lemmatized: 38\n",
            "  Stemmed: 38\n",
            "⚠ Warning: 38 texts became empty after preprocessing\n",
            "\n",
            "Most common words by sentiment (using lemmatized text):\n",
            "==================================================\n",
            "\n",
            "Top 15 words in POSITIVE tweets:\n",
            "  thanks: 577\n",
            "  flight: 439\n",
            "  thank: 428\n",
            "  great: 234\n",
            "  service: 162\n",
            "  love: 135\n",
            "  customer: 123\n",
            "  guy: 121\n",
            "  get: 119\n",
            "  but: 111\n",
            "  time: 109\n",
            "  good: 108\n",
            "  much: 107\n",
            "  airline: 105\n",
            "  best: 102\n",
            "\n",
            "Top 15 words in NEGATIVE tweets:\n",
            "  flight: 3331\n",
            "  not: 1380\n",
            "  hour: 1098\n",
            "  get: 1012\n",
            "  but: 950\n",
            "  cancelled: 906\n",
            "  customer: 772\n",
            "  service: 764\n",
            "  time: 740\n",
            "  bag: 657\n",
            "  help: 613\n",
            "  hold: 610\n",
            "  plane: 596\n",
            "  call: 505\n",
            "  delayed: 500\n",
            "\n",
            "Top 15 words in NEUTRAL tweets:\n",
            "  flight: 775\n",
            "  get: 238\n",
            "  please: 179\n",
            "  need: 178\n",
            "  but: 169\n",
            "  help: 165\n",
            "  not: 155\n",
            "  thanks: 151\n",
            "  would: 121\n",
            "  ticket: 110\n",
            "  time: 108\n",
            "  tomorrow: 107\n",
            "  fleek: 107\n",
            "  fleet: 103\n",
            "  know: 102\n",
            "\n",
            "Overall top 20 most common words:\n",
            "  flight: 4545\n",
            "  not: 1614\n",
            "  get: 1369\n",
            "  but: 1230\n",
            "  hour: 1151\n",
            "  cancelled: 1042\n",
            "  thanks: 1037\n",
            "  service: 989\n",
            "  time: 957\n",
            "  customer: 929\n",
            "  help: 864\n",
            "  bag: 763\n",
            "  plane: 726\n",
            "  hold: 640\n",
            "  need: 629\n",
            "  one: 585\n",
            "  still: 580\n",
            "  thank: 575\n",
            "  day: 567\n",
            "  call: 562\n",
            "\n",
            "Vocabulary statistics:\n",
            "  Total words: 121,954\n",
            "  Unique words: 9,931\n",
            "  Vocabulary diversity: 0.0814\n",
            "\n",
            "Text length distribution after preprocessing:\n",
            "  text_processed: avg=55.9, min=0, max=130\n",
            "  text_lemmatized: avg=55.2, min=0, max=129\n",
            "  text_stemmed: avg=49.5, min=0, max=115\n",
            "\n",
            "✓ Text preprocessing pipeline completed successfully!\n",
            "Dataset ready for Phase 4: Feature Engineering and Embeddings\n",
            "============================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Phase 5: Feature Engineering for Logistic Regression\n",
        "\n",
        "This phase creates feature representations optimized for Logistic Regression. We'll focus on TF-IDF vectors, n-grams, and statistical features that work well with linear models."
      ],
      "metadata": {
        "id": "e3ohPY5XOMfJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 18. TF-IDF and N-gram Feature Engineering"
      ],
      "metadata": {
        "id": "z6a2byYbOR6h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# TF-IDF and N-gram Feature Engineering for Logistic Regression\n",
        "print(\"PHASE 5: FEATURE ENGINEERING FOR LOGISTIC REGRESSION\")\n",
        "print(\"=\"*52)\n",
        "\n",
        "# Import feature engineering libraries\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import numpy as np\n",
        "import scipy.sparse as sp\n",
        "\n",
        "# Use lemmatized text for feature engineering\n",
        "texts = df['text_lemmatized'].fillna('')\n",
        "labels = df['airline_sentiment']\n",
        "\n",
        "print(f\"Creating features from {len(texts)} documents...\")\n",
        "print(f\"Target distribution: {labels.value_counts().to_dict()}\")\n",
        "\n",
        "# 1. MAIN TF-IDF FEATURES (Optimized for Logistic Regression)\n",
        "print(f\"\\n1. MAIN TF-IDF FEATURES\")\n",
        "print(\"=\"*23)\n",
        "\n",
        "# Create primary TF-IDF vectorizer with optimal settings for Logistic Regression\n",
        "tfidf_main = TfidfVectorizer(\n",
        "    ngram_range=(1, 2),         # Unigrams and bigrams work well for LogReg\n",
        "    max_features=10000,         # Good balance of features for LogReg\n",
        "    min_df=3,                   # Must appear in at least 3 documents\n",
        "    max_df=0.9,                 # Ignore very common words\n",
        "    stop_words='english',       # Remove stopwords\n",
        "    lowercase=True,\n",
        "    norm='l2',                  # L2 normalization (important for LogReg)\n",
        "    use_idf=True,\n",
        "    smooth_idf=True,\n",
        "    sublinear_tf=True          # Helps with very frequent terms\n",
        ")\n",
        "\n",
        "print(\"Creating main TF-IDF feature matrix...\")\n",
        "X_tfidf_main = tfidf_main.fit_transform(texts)\n",
        "print(f\"✓ Main TF-IDF shape: {X_tfidf_main.shape}\")\n",
        "print(f\"✓ Vocabulary size: {len(tfidf_main.vocabulary_)}\")\n",
        "print(f\"✓ Sparsity: {(1.0 - X_tfidf_main.nnz / (X_tfidf_main.shape[0] * X_tfidf_main.shape[1])) * 100:.2f}%\")\n",
        "\n",
        "# Get feature names for analysis\n",
        "feature_names_main = tfidf_main.get_feature_names_out()\n",
        "print(f\"✓ Sample features: {list(feature_names_main[:15])}\")\n",
        "\n",
        "# 2. CHARACTER-LEVEL N-GRAMS (Additional features for LogReg)\n",
        "print(f\"\\n2. CHARACTER-LEVEL N-GRAMS\")\n",
        "print(\"=\"*27)\n",
        "\n",
        "# Character n-grams can capture misspellings, informal text patterns\n",
        "tfidf_char = TfidfVectorizer(\n",
        "    analyzer='char',            # Character-level analysis\n",
        "    ngram_range=(3, 5),         # 3-5 character n-grams\n",
        "    max_features=3000,          # Fewer features for char n-grams\n",
        "    min_df=5,\n",
        "    max_df=0.9,\n",
        "    lowercase=True,\n",
        "    norm='l2'\n",
        ")\n",
        "\n",
        "print(\"Creating character n-gram features...\")\n",
        "X_tfidf_char = tfidf_char.fit_transform(texts)\n",
        "print(f\"✓ Character n-gram shape: {X_tfidf_char.shape}\")\n",
        "print(f\"✓ Sample char n-grams: {list(tfidf_char.get_feature_names_out()[:10])}\")\n",
        "\n",
        "# 3. ANALYZE TOP FEATURES BY SENTIMENT\n",
        "print(f\"\\n3. TOP FEATURES BY SENTIMENT\")\n",
        "print(\"=\"*29)\n",
        "\n",
        "def get_top_features_by_sentiment(vectorizer, X_matrix, sentiment_value, top_n=15):\n",
        "    \"\"\"Get top features for a specific sentiment\"\"\"\n",
        "    # Get indices for this sentiment\n",
        "    sentiment_mask = (labels == sentiment_value)\n",
        "    sentiment_indices = np.where(sentiment_mask)[0]\n",
        "\n",
        "    # Calculate mean TF-IDF scores for this sentiment\n",
        "    sentiment_matrix = X_matrix[sentiment_indices]\n",
        "    mean_scores = np.array(sentiment_matrix.mean(axis=0)).flatten()\n",
        "\n",
        "    # Get feature names and top features\n",
        "    feature_names = vectorizer.get_feature_names_out()\n",
        "    top_indices = mean_scores.argsort()[-top_n:][::-1]\n",
        "\n",
        "    return [(feature_names[i], mean_scores[i]) for i in top_indices]\n",
        "\n",
        "# Analyze top features for each sentiment\n",
        "sentiments = ['positive', 'negative', 'neutral']\n",
        "sentiment_features = {}\n",
        "\n",
        "for sentiment in sentiments:\n",
        "    print(f\"\\nTop 15 features for {sentiment.upper()} sentiment:\")\n",
        "    top_features = get_top_features_by_sentiment(tfidf_main, X_tfidf_main, sentiment)\n",
        "    sentiment_features[sentiment] = top_features\n",
        "\n",
        "    for i, (feature, score) in enumerate(top_features, 1):\n",
        "        print(f\"  {i:2d}. {feature:<20} {score:.4f}\")\n",
        "\n",
        "# 4. FEATURE IMPORTANCE ANALYSIS\n",
        "print(f\"\\n4. FEATURE IMPORTANCE ANALYSIS\")\n",
        "print(\"=\"*31)\n",
        "\n",
        "# Calculate overall feature importance (variance across sentiments)\n",
        "feature_importance = {}\n",
        "feature_names = tfidf_main.get_feature_names_out()\n",
        "\n",
        "for i, feature in enumerate(feature_names):\n",
        "    scores = []\n",
        "    for sentiment in sentiments:\n",
        "        sentiment_mask = (labels == sentiment)\n",
        "        sentiment_indices = np.where(sentiment_mask)[0]\n",
        "        if len(sentiment_indices) > 0:\n",
        "            sentiment_matrix = X_tfidf_main[sentiment_indices]\n",
        "            mean_score = sentiment_matrix[:, i].mean()\n",
        "            scores.append(mean_score)\n",
        "\n",
        "    # Calculate variance as importance measure\n",
        "    if scores:\n",
        "        feature_importance[feature] = np.var(scores)\n",
        "\n",
        "# Get most discriminative features\n",
        "most_important = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)[:20]\n",
        "\n",
        "print(\"Top 20 most discriminative features (high variance across sentiments):\")\n",
        "for i, (feature, importance) in enumerate(most_important, 1):\n",
        "    print(f\"  {i:2d}. {feature:<20} {importance:.6f}\")\n",
        "\n",
        "print(f\"\\n✓ TF-IDF feature engineering completed!\")\n",
        "print(f\"✓ Ready for statistical feature engineering...\")\n",
        "print(\"=\"*52)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rP__FvpCONYZ",
        "outputId": "1f19deeb-7bc3-4e65-a124-dbf96ce63e8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PHASE 5: FEATURE ENGINEERING FOR LOGISTIC REGRESSION\n",
            "====================================================\n",
            "Creating features from 14427 documents...\n",
            "Target distribution: {'negative': 9080, 'neutral': 3057, 'positive': 2290}\n",
            "\n",
            "1. MAIN TF-IDF FEATURES\n",
            "=======================\n",
            "Creating main TF-IDF feature matrix...\n",
            "✓ Main TF-IDF shape: (14427, 7101)\n",
            "✓ Vocabulary size: 7101\n",
            "✓ Sparsity: 99.88%\n",
            "✓ Sample features: ['aadvantage', 'abc', 'ability', 'able', 'able change', 'able check', 'able flight', 'able help', 'able leave', 'able reach', 'able rebook', 'able seat', 'able use', 'aboard', 'abq']\n",
            "\n",
            "2. CHARACTER-LEVEL N-GRAMS\n",
            "===========================\n",
            "Creating character n-gram features...\n",
            "✓ Character n-gram shape: (14427, 3000)\n",
            "✓ Sample char n-grams: [' ab', ' ac', ' acc', ' ad', ' add', ' ag', ' age', ' agen', ' ai', ' air']\n",
            "\n",
            "3. TOP FEATURES BY SENTIMENT\n",
            "=============================\n",
            "\n",
            "Top 15 features for POSITIVE sentiment:\n",
            "   1. thanks               0.0764\n",
            "   2. thank                0.0725\n",
            "   3. great                0.0284\n",
            "   4. flight               0.0217\n",
            "   5. love                 0.0191\n",
            "   6. awesome              0.0153\n",
            "   7. best                 0.0148\n",
            "   8. good                 0.0141\n",
            "   9. guy                  0.0140\n",
            "  10. service              0.0135\n",
            "  11. amazing              0.0117\n",
            "  12. airline              0.0111\n",
            "  13. got                  0.0106\n",
            "  14. customer             0.0103\n",
            "  15. appreciate           0.0099\n",
            "\n",
            "Top 15 features for NEGATIVE sentiment:\n",
            "   1. flight               0.0388\n",
            "   2. hour                 0.0213\n",
            "   3. cancelled            0.0167\n",
            "   4. customer             0.0160\n",
            "   5. service              0.0156\n",
            "   6. time                 0.0148\n",
            "   7. hold                 0.0144\n",
            "   8. bag                  0.0144\n",
            "   9. help                 0.0131\n",
            "  10. plane                0.0128\n",
            "  11. delayed              0.0121\n",
            "  12. customer service     0.0108\n",
            "  13. day                  0.0104\n",
            "  14. delay                0.0100\n",
            "  15. flightled            0.0100\n",
            "\n",
            "Top 15 features for NEUTRAL sentiment:\n",
            "   1. flight               0.0339\n",
            "   2. fleek                0.0177\n",
            "   3. fleet fleek          0.0171\n",
            "   4. fleet                0.0170\n",
            "   5. thanks               0.0147\n",
            "   6. need                 0.0133\n",
            "   7. help                 0.0122\n",
            "   8. follow               0.0108\n",
            "   9. know                 0.0095\n",
            "  10. sent                 0.0095\n",
            "  11. tomorrow             0.0094\n",
            "  12. thank                0.0090\n",
            "  13. ticket               0.0087\n",
            "  14. way                  0.0086\n",
            "  15. change               0.0074\n",
            "\n",
            "4. FEATURE IMPORTANCE ANALYSIS\n",
            "===============================\n",
            "Top 20 most discriminative features (high variance across sentiments):\n",
            "   1. thank                0.001005\n",
            "   2. thanks               0.000977\n",
            "   3. great                0.000155\n",
            "   4. hour                 0.000085\n",
            "   5. love                 0.000058\n",
            "   6. fleek                0.000055\n",
            "   7. flight               0.000052\n",
            "   8. fleet fleek          0.000051\n",
            "   9. fleet                0.000049\n",
            "  10. awesome              0.000047\n",
            "  11. hold                 0.000039\n",
            "  12. cancelled            0.000036\n",
            "  13. best                 0.000036\n",
            "  14. customer             0.000032\n",
            "  15. amazing              0.000027\n",
            "  16. service              0.000025\n",
            "  17. bag                  0.000024\n",
            "  18. delayed              0.000024\n",
            "  19. need                 0.000022\n",
            "  20. good                 0.000022\n",
            "\n",
            "✓ TF-IDF feature engineering completed!\n",
            "✓ Ready for statistical feature engineering...\n",
            "====================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Statistical and Sentiment-Specific Features for Logistic Regression\n",
        "print(\"STATISTICAL AND SENTIMENT-SPECIFIC FEATURES\")\n",
        "print(\"=\"*43)\n",
        "\n",
        "# Create comprehensive statistical features\n",
        "statistical_features = pd.DataFrame()\n",
        "\n",
        "# Use original text for some features, processed text for others\n",
        "original_texts = df['text'].fillna('')\n",
        "processed_texts = df['text_lemmatized'].fillna('')\n",
        "\n",
        "print(\"Creating statistical features...\")\n",
        "\n",
        "# 1. BASIC TEXT STATISTICS\n",
        "print(f\"\\n1. BASIC TEXT STATISTICS\")\n",
        "print(\"=\"*24)\n",
        "\n",
        "# Text length features\n",
        "statistical_features['text_length'] = original_texts.str.len()\n",
        "statistical_features['processed_length'] = processed_texts.str.len()\n",
        "statistical_features['word_count'] = original_texts.str.split().str.len()\n",
        "statistical_features['processed_word_count'] = processed_texts.str.split().str.len()\n",
        "\n",
        "# Average word length\n",
        "statistical_features['avg_word_length'] = original_texts.apply(\n",
        "    lambda x: np.mean([len(word) for word in x.split()]) if x.split() else 0\n",
        ")\n",
        "\n",
        "print(\"✓ Text length, word count, and average word length\")\n",
        "\n",
        "# 2. PUNCTUATION AND CAPITALIZATION FEATURES\n",
        "print(f\"\\n2. PUNCTUATION AND CAPITALIZATION\")\n",
        "print(\"=\"*34)\n",
        "\n",
        "# Punctuation ratios\n",
        "statistical_features['exclamation_count'] = original_texts.str.count('!')\n",
        "statistical_features['question_count'] = original_texts.str.count('\\?')\n",
        "statistical_features['period_count'] = original_texts.str.count('\\.')\n",
        "statistical_features['comma_count'] = original_texts.str.count(',')\n",
        "\n",
        "# Punctuation ratios (normalized by text length)\n",
        "statistical_features['exclamation_ratio'] = statistical_features['exclamation_count'] / (statistical_features['text_length'] + 1)\n",
        "statistical_features['question_ratio'] = statistical_features['question_count'] / (statistical_features['text_length'] + 1)\n",
        "statistical_features['punctuation_ratio'] = (\n",
        "    statistical_features['exclamation_count'] +\n",
        "    statistical_features['question_count'] +\n",
        "    statistical_features['period_count'] +\n",
        "    statistical_features['comma_count']\n",
        ") / (statistical_features['text_length'] + 1)\n",
        "\n",
        "# Capitalization features\n",
        "statistical_features['caps_count'] = original_texts.str.count(r'[A-Z]')\n",
        "statistical_features['caps_ratio'] = statistical_features['caps_count'] / (statistical_features['text_length'] + 1)\n",
        "statistical_features['all_caps_words'] = original_texts.str.findall(r'\\b[A-Z]{2,}\\b').str.len()\n",
        "\n",
        "print(\"✓ Punctuation counts and ratios\")\n",
        "print(\"✓ Capitalization features\")\n",
        "\n",
        "# 3. SENTIMENT-SPECIFIC FEATURES\n",
        "print(f\"\\n3. SENTIMENT-SPECIFIC FEATURES\")\n",
        "print(\"=\"*31)\n",
        "\n",
        "# Define sentiment-related patterns\n",
        "positive_words = ['good', 'great', 'excellent', 'amazing', 'awesome', 'love', 'best', 'perfect', 'wonderful', 'fantastic']\n",
        "negative_words = ['bad', 'terrible', 'awful', 'hate', 'worst', 'horrible', 'disappointed', 'angry', 'frustrated', 'annoying']\n",
        "negation_words = ['not', 'no', 'never', 'nothing', 'nobody', 'nowhere', 'neither', 'none']\n",
        "\n",
        "# Count positive/negative words\n",
        "def count_word_list(text, word_list):\n",
        "    if pd.isna(text):\n",
        "        return 0\n",
        "    text_lower = text.lower()\n",
        "    return sum(1 for word in word_list if word in text_lower.split())\n",
        "\n",
        "statistical_features['positive_word_count'] = processed_texts.apply(lambda x: count_word_list(x, positive_words))\n",
        "statistical_features['negative_word_count'] = processed_texts.apply(lambda x: count_word_list(x, negative_words))\n",
        "statistical_features['negation_count'] = processed_texts.apply(lambda x: count_word_list(x, negation_words))\n",
        "\n",
        "# Sentiment word ratios\n",
        "statistical_features['positive_word_ratio'] = statistical_features['positive_word_count'] / (statistical_features['word_count'] + 1)\n",
        "statistical_features['negative_word_ratio'] = statistical_features['negative_word_count'] / (statistical_features['word_count'] + 1)\n",
        "statistical_features['negation_ratio'] = statistical_features['negation_count'] / (statistical_features['word_count'] + 1)\n",
        "\n",
        "# Sentiment polarity score (simple)\n",
        "statistical_features['sentiment_polarity'] = statistical_features['positive_word_count'] - statistical_features['negative_word_count']\n",
        "\n",
        "print(\"✓ Positive/negative word counts and ratios\")\n",
        "print(\"✓ Negation detection\")\n",
        "print(\"✓ Simple sentiment polarity score\")\n",
        "\n",
        "# 4. SOCIAL MEDIA SPECIFIC FEATURES\n",
        "print(f\"\\n4. SOCIAL MEDIA FEATURES\")\n",
        "print(\"=\"*24)\n",
        "\n",
        "# Social media patterns\n",
        "statistical_features['mention_count'] = original_texts.str.count('@\\w+')\n",
        "statistical_features['hashtag_count'] = original_texts.str.count('#\\w+')\n",
        "statistical_features['url_count'] = original_texts.str.count(r'http\\S+|www\\S+')\n",
        "\n",
        "# Mention/hashtag ratios\n",
        "statistical_features['mention_ratio'] = statistical_features['mention_count'] / (statistical_features['word_count'] + 1)\n",
        "statistical_features['hashtag_ratio'] = statistical_features['hashtag_count'] / (statistical_features['word_count'] + 1)\n",
        "\n",
        "print(\"✓ Mentions, hashtags, and URLs\")\n",
        "print(\"✓ Social media engagement ratios\")\n",
        "\n",
        "# 5. FEATURE SCALING AND FINAL PREPARATION\n",
        "print(f\"\\n5. FEATURE SCALING AND PREPARATION\")\n",
        "print(\"=\"*35)\n",
        "\n",
        "# Fill any NaN values\n",
        "statistical_features = statistical_features.fillna(0)\n",
        "\n",
        "# Create scaled version for logistic regression\n",
        "scaler = StandardScaler()\n",
        "statistical_features_scaled = pd.DataFrame(\n",
        "    scaler.fit_transform(statistical_features),\n",
        "    columns=statistical_features.columns,\n",
        "    index=statistical_features.index\n",
        ")\n",
        "\n",
        "print(f\"✓ Created {statistical_features.shape[1]} statistical features\")\n",
        "print(f\"✓ Applied StandardScaler normalization\")\n",
        "print(f\"✓ Features shape: {statistical_features.shape}\")\n",
        "\n",
        "# Display feature summary\n",
        "print(f\"\\nStatistical Features Summary:\")\n",
        "print(\"=\"*28)\n",
        "print(f\"Total features: {statistical_features.shape[1]}\")\n",
        "print(f\"Feature categories:\")\n",
        "print(f\"  - Basic text stats: 5 features\")\n",
        "print(f\"  - Punctuation: 8 features\")\n",
        "print(f\"  - Sentiment-specific: 7 features\")\n",
        "print(f\"  - Social media: 5 features\")\n",
        "\n",
        "# Show feature correlation with target\n",
        "print(f\"\\nTop 10 features correlated with sentiment:\")\n",
        "target_encoded = pd.get_dummies(labels)['negative']  # Use negative as binary target for correlation\n",
        "correlations = {}\n",
        "for col in statistical_features.columns:\n",
        "    corr = np.corrcoef(statistical_features[col], target_encoded)[0,1]\n",
        "    if not np.isnan(corr):\n",
        "        correlations[col] = abs(corr)\n",
        "\n",
        "top_correlated = sorted(correlations.items(), key=lambda x: x[1], reverse=True)[:10]\n",
        "for i, (feature, corr) in enumerate(top_correlated, 1):\n",
        "    print(f\"  {i:2d}. {feature:<25} {corr:.4f}\")\n",
        "\n",
        "print(f\"\\n✓ Statistical feature engineering completed!\")\n",
        "print(f\"✓ Ready to combine with TF-IDF features!\")\n",
        "print(\"=\"*43)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RFr7cIPvOs1x",
        "outputId": "0975a337-2b84-4345-8a58-4d892b5131f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "STATISTICAL AND SENTIMENT-SPECIFIC FEATURES\n",
            "===========================================\n",
            "Creating statistical features...\n",
            "\n",
            "1. BASIC TEXT STATISTICS\n",
            "========================\n",
            "✓ Text length, word count, and average word length\n",
            "\n",
            "2. PUNCTUATION AND CAPITALIZATION\n",
            "==================================\n",
            "✓ Punctuation counts and ratios\n",
            "✓ Capitalization features\n",
            "\n",
            "3. SENTIMENT-SPECIFIC FEATURES\n",
            "===============================\n",
            "✓ Positive/negative word counts and ratios\n",
            "✓ Negation detection\n",
            "✓ Simple sentiment polarity score\n",
            "\n",
            "4. SOCIAL MEDIA FEATURES\n",
            "========================\n",
            "✓ Mentions, hashtags, and URLs\n",
            "✓ Social media engagement ratios\n",
            "\n",
            "5. FEATURE SCALING AND PREPARATION\n",
            "===================================\n",
            "✓ Created 27 statistical features\n",
            "✓ Applied StandardScaler normalization\n",
            "✓ Features shape: (14427, 27)\n",
            "\n",
            "Statistical Features Summary:\n",
            "============================\n",
            "Total features: 27\n",
            "Feature categories:\n",
            "  - Basic text stats: 5 features\n",
            "  - Punctuation: 8 features\n",
            "  - Sentiment-specific: 7 features\n",
            "  - Social media: 5 features\n",
            "\n",
            "Top 10 features correlated with sentiment:\n",
            "   1. word_count                0.3763\n",
            "   2. text_length               0.3548\n",
            "   3. processed_word_count      0.3449\n",
            "   4. processed_length          0.3392\n",
            "   5. mention_ratio             0.3239\n",
            "   6. sentiment_polarity        0.2579\n",
            "   7. positive_word_ratio       0.2252\n",
            "   8. caps_ratio                0.2194\n",
            "   9. avg_word_length           0.2163\n",
            "  10. positive_word_count       0.2096\n",
            "\n",
            "✓ Statistical feature engineering completed!\n",
            "✓ Ready to combine with TF-IDF features!\n",
            "===========================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Phase 6: Train-Test Split and Data Preparation\n",
        "\n",
        "Now we'll create proper train/validation/test splits and prepare the final feature matrices for Logistic Regression training. This phase ensures we have clean, properly formatted data with no leakage between sets."
      ],
      "metadata": {
        "id": "U0NL0GRkYMGu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 20. Data Splitting Strategy\n",
        "\n",
        "Create stratified train/validation/test splits that maintain class distribution across all sets."
      ],
      "metadata": {
        "id": "6CQlGqzMYM92"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Train-Test Split and Data Preparation\n",
        "print(\"PHASE 6: TRAIN-TEST SPLIT AND DATA PREPARATION\")\n",
        "print(\"=\"*46)\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import scipy.sparse as sp\n",
        "\n",
        "# 1. PREPARE TARGET LABELS\n",
        "print(f\"\\n1. TARGET LABEL PREPARATION\")\n",
        "print(\"=\"*27)\n",
        "\n",
        "# Encode sentiment labels\n",
        "label_encoder = LabelEncoder()\n",
        "y = label_encoder.fit_transform(labels)\n",
        "label_names = label_encoder.classes_\n",
        "\n",
        "print(f\"Original sentiment distribution:\")\n",
        "for sentiment, count in labels.value_counts().items():\n",
        "    percentage = (count / len(labels)) * 100\n",
        "    print(f\"  {sentiment}: {count:,} ({percentage:.1f}%)\")\n",
        "\n",
        "print(f\"\\nEncoded labels:\")\n",
        "for i, label_name in enumerate(label_names):\n",
        "    count = (y == i).sum()\n",
        "    percentage = (count / len(y)) * 100\n",
        "    print(f\"  {label_name} -> {i}: {count:,} ({percentage:.1f}%)\")\n",
        "\n",
        "# 2. COMBINE ALL FEATURES\n",
        "print(f\"\\n2. FEATURE MATRIX COMBINATION\")\n",
        "print(\"=\"*30)\n",
        "\n",
        "print(\"Combining feature matrices...\")\n",
        "\n",
        "# Main TF-IDF features (10,000 features)\n",
        "print(f\"Main TF-IDF features: {X_tfidf_main.shape}\")\n",
        "\n",
        "# Character n-gram features (3,000 features)\n",
        "print(f\"Character n-gram features: {X_tfidf_char.shape}\")\n",
        "\n",
        "# Statistical features (25 features, scaled)\n",
        "X_statistical = sp.csr_matrix(statistical_features_scaled.values)\n",
        "print(f\"Statistical features: {X_statistical.shape}\")\n",
        "\n",
        "# Combine all features horizontally\n",
        "X_combined = sp.hstack([\n",
        "    X_tfidf_main,      # Main TF-IDF (10,000 features)\n",
        "    X_tfidf_char,      # Character n-grams (3,000 features)\n",
        "    X_statistical      # Statistical features (25 features)\n",
        "], format='csr')\n",
        "\n",
        "print(f\"\\nCombined feature matrix shape: {X_combined.shape}\")\n",
        "print(f\"Total features: {X_combined.shape[1]:,}\")\n",
        "print(f\"Feature breakdown:\")\n",
        "print(f\"  - Main TF-IDF: {X_tfidf_main.shape[1]:,} features\")\n",
        "print(f\"  - Character n-grams: {X_tfidf_char.shape[1]:,} features\")\n",
        "print(f\"  - Statistical features: {X_statistical.shape[1]} features\")\n",
        "print(f\"  - Combined sparsity: {(1.0 - X_combined.nnz / (X_combined.shape[0] * X_combined.shape[1])) * 100:.2f}%\")\n",
        "\n",
        "# 3. STRATIFIED DATA SPLITTING\n",
        "print(f\"\\n3. STRATIFIED DATA SPLITTING\")\n",
        "print(\"=\"*29)\n",
        "\n",
        "# First split: Train+Val vs Test (80% vs 20%)\n",
        "print(\"Creating train+validation vs test split (80/20)...\")\n",
        "X_temp, X_test, y_temp, y_test = train_test_split(\n",
        "    X_combined, y,\n",
        "    test_size=0.2,           # 20% for test\n",
        "    random_state=42,\n",
        "    stratify=y               # Maintain class distribution\n",
        ")\n",
        "\n",
        "print(f\"Test set size: {X_test.shape[0]:,} samples ({(X_test.shape[0]/X_combined.shape[0])*100:.1f}%)\")\n",
        "\n",
        "# Second split: Train vs Validation (75% vs 25% of remaining data)\n",
        "# This gives us 60% train, 20% val, 20% test\n",
        "print(\"Creating train vs validation split (75/25 of remaining data)...\")\n",
        "X_train, X_val, y_train, y_val = train_test_split(\n",
        "    X_temp, y_temp,\n",
        "    test_size=0.25,          # 25% of remaining 80% = 20% overall\n",
        "    random_state=42,\n",
        "    stratify=y_temp          # Maintain class distribution\n",
        ")\n",
        "\n",
        "print(f\"Training set size: {X_train.shape[0]:,} samples ({(X_train.shape[0]/X_combined.shape[0])*100:.1f}%)\")\n",
        "print(f\"Validation set size: {X_val.shape[0]:,} samples ({(X_val.shape[0]/X_combined.shape[0])*100:.1f}%)\")\n",
        "\n",
        "# 4. VERIFY CLASS DISTRIBUTION\n",
        "print(f\"\\n4. CLASS DISTRIBUTION VERIFICATION\")\n",
        "print(\"=\"*34)\n",
        "\n",
        "def print_class_distribution(y_subset, set_name):\n",
        "    \"\"\"Print class distribution for a dataset split\"\"\"\n",
        "    print(f\"\\n{set_name} set distribution:\")\n",
        "    for i, label_name in enumerate(label_names):\n",
        "        count = (y_subset == i).sum()\n",
        "        percentage = (count / len(y_subset)) * 100\n",
        "        print(f\"  {label_name}: {count:,} ({percentage:.1f}%)\")\n",
        "\n",
        "print_class_distribution(y_train, \"Training\")\n",
        "print_class_distribution(y_val, \"Validation\")\n",
        "print_class_distribution(y_test, \"Test\")\n",
        "\n",
        "# Check if distributions are similar\n",
        "train_dist = [(y_train == i).sum() / len(y_train) for i in range(len(label_names))]\n",
        "val_dist = [(y_val == i).sum() / len(y_val) for i in range(len(label_names))]\n",
        "test_dist = [(y_test == i).sum() / len(y_test) for i in range(len(label_names))]\n",
        "\n",
        "print(f\"\\nDistribution similarity check:\")\n",
        "for i, label_name in enumerate(label_names):\n",
        "    print(f\"  {label_name}: Train={train_dist[i]:.3f}, Val={val_dist[i]:.3f}, Test={test_dist[i]:.3f}\")\n",
        "\n",
        "max_diff = max(\n",
        "    abs(train_dist[i] - val_dist[i]) for i in range(len(label_names))\n",
        ")\n",
        "print(f\"Maximum distribution difference: {max_diff:.4f}\")\n",
        "\n",
        "if max_diff < 0.02:  # Less than 2% difference\n",
        "    print(\"✓ Class distributions are well balanced across splits\")\n",
        "else:\n",
        "    print(\"⚠ Some class distribution imbalance detected\")\n",
        "\n",
        "print(f\"\\n✓ Data splitting completed successfully!\")\n",
        "print(\"=\"*46)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NKiwjKh5XzfX",
        "outputId": "398d57bb-5f0e-4939-a565-73757dfd272f"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PHASE 6: TRAIN-TEST SPLIT AND DATA PREPARATION\n",
            "==============================================\n",
            "\n",
            "1. TARGET LABEL PREPARATION\n",
            "===========================\n",
            "Original sentiment distribution:\n",
            "  negative: 9,080 (62.9%)\n",
            "  neutral: 3,057 (21.2%)\n",
            "  positive: 2,290 (15.9%)\n",
            "\n",
            "Encoded labels:\n",
            "  negative -> 0: 9,080 (62.9%)\n",
            "  neutral -> 1: 3,057 (21.2%)\n",
            "  positive -> 2: 2,290 (15.9%)\n",
            "\n",
            "2. FEATURE MATRIX COMBINATION\n",
            "==============================\n",
            "Combining feature matrices...\n",
            "Main TF-IDF features: (14427, 7101)\n",
            "Character n-gram features: (14427, 3000)\n",
            "Statistical features: (14427, 27)\n",
            "\n",
            "Combined feature matrix shape: (14427, 10128)\n",
            "Total features: 10,128\n",
            "Feature breakdown:\n",
            "  - Main TF-IDF: 7,101 features\n",
            "  - Character n-grams: 3,000 features\n",
            "  - Statistical features: 27 features\n",
            "  - Combined sparsity: 98.80%\n",
            "\n",
            "3. STRATIFIED DATA SPLITTING\n",
            "=============================\n",
            "Creating train+validation vs test split (80/20)...\n",
            "Test set size: 2,886 samples (20.0%)\n",
            "Creating train vs validation split (75/25 of remaining data)...\n",
            "Training set size: 8,655 samples (60.0%)\n",
            "Validation set size: 2,886 samples (20.0%)\n",
            "\n",
            "4. CLASS DISTRIBUTION VERIFICATION\n",
            "==================================\n",
            "\n",
            "Training set distribution:\n",
            "  negative: 5,447 (62.9%)\n",
            "  neutral: 1,834 (21.2%)\n",
            "  positive: 1,374 (15.9%)\n",
            "\n",
            "Validation set distribution:\n",
            "  negative: 1,817 (63.0%)\n",
            "  neutral: 611 (21.2%)\n",
            "  positive: 458 (15.9%)\n",
            "\n",
            "Test set distribution:\n",
            "  negative: 1,816 (62.9%)\n",
            "  neutral: 612 (21.2%)\n",
            "  positive: 458 (15.9%)\n",
            "\n",
            "Distribution similarity check:\n",
            "  negative: Train=0.629, Val=0.630, Test=0.629\n",
            "  neutral: Train=0.212, Val=0.212, Test=0.212\n",
            "  positive: Train=0.159, Val=0.159, Test=0.159\n",
            "Maximum distribution difference: 0.0002\n",
            "✓ Class distributions are well balanced across splits\n",
            "\n",
            "✓ Data splitting completed successfully!\n",
            "==============================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 21. Final Data Preparation and Validation\n",
        "\n",
        "Perform final checks and prepare data structures for efficient model training."
      ],
      "metadata": {
        "id": "voW5E7IqX-vG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Final Data Preparation and Validation\n",
        "print(\"FINAL DATA PREPARATION AND VALIDATION\")\n",
        "print(\"=\"*36)\n",
        "\n",
        "# 1. DATA INTEGRITY CHECKS\n",
        "print(f\"\\n1. DATA INTEGRITY CHECKS\")\n",
        "print(\"=\"*25)\n",
        "\n",
        "# Check for any NaN or infinite values in features\n",
        "print(\"Checking for problematic values in feature matrices...\")\n",
        "\n",
        "def check_matrix_integrity(matrix, name):\n",
        "    \"\"\"Check matrix for NaN, inf, or other problematic values\"\"\"\n",
        "    if sp.issparse(matrix):\n",
        "        # For sparse matrices\n",
        "        has_nan = np.isnan(matrix.data).any()\n",
        "        has_inf = np.isinf(matrix.data).any()\n",
        "        nnz = matrix.nnz\n",
        "        density = nnz / (matrix.shape[0] * matrix.shape[1])\n",
        "    else:\n",
        "        # For dense matrices\n",
        "        has_nan = np.isnan(matrix).any()\n",
        "        has_inf = np.isinf(matrix).any()\n",
        "        nnz = np.count_nonzero(matrix)\n",
        "        density = nnz / matrix.size\n",
        "\n",
        "    print(f\"  {name}:\")\n",
        "    print(f\"    Shape: {matrix.shape}\")\n",
        "    print(f\"    Has NaN: {has_nan}\")\n",
        "    print(f\"    Has Inf: {has_inf}\")\n",
        "    print(f\"    Non-zero elements: {nnz:,}\")\n",
        "    print(f\"    Density: {density:.4f}\")\n",
        "\n",
        "    return not (has_nan or has_inf)\n",
        "\n",
        "# Check all matrices\n",
        "train_ok = check_matrix_integrity(X_train, \"Training set\")\n",
        "val_ok = check_matrix_integrity(X_val, \"Validation set\")\n",
        "test_ok = check_matrix_integrity(X_test, \"Test set\")\n",
        "\n",
        "if train_ok and val_ok and test_ok:\n",
        "    print(\"✓ All feature matrices are clean and ready for training\")\n",
        "else:\n",
        "    print(\"⚠ Some matrices contain problematic values\")\n",
        "\n",
        "# Check target labels\n",
        "print(f\"\\nTarget label checks:\")\n",
        "print(f\"  Training labels: min={y_train.min()}, max={y_train.max()}, unique={len(np.unique(y_train))}\")\n",
        "print(f\"  Validation labels: min={y_val.min()}, max={y_val.max()}, unique={len(np.unique(y_val))}\")\n",
        "print(f\"  Test labels: min={y_test.min()}, max={y_test.max()}, unique={len(np.unique(y_test))}\")\n",
        "\n",
        "# 2. MEMORY USAGE ANALYSIS\n",
        "print(f\"\\n2. MEMORY USAGE ANALYSIS\")\n",
        "print(\"=\"*25)\n",
        "\n",
        "def get_matrix_memory(matrix, name):\n",
        "    \"\"\"Calculate memory usage of a matrix\"\"\"\n",
        "    if sp.issparse(matrix):\n",
        "        memory_mb = (matrix.data.nbytes + matrix.indices.nbytes + matrix.indptr.nbytes) / (1024**2)\n",
        "    else:\n",
        "        memory_mb = matrix.nbytes / (1024**2)\n",
        "\n",
        "    print(f\"  {name}: {memory_mb:.2f} MB\")\n",
        "    return memory_mb\n",
        "\n",
        "total_memory = 0\n",
        "total_memory += get_matrix_memory(X_train, \"Training set\")\n",
        "total_memory += get_matrix_memory(X_val, \"Validation set\")\n",
        "total_memory += get_matrix_memory(X_test, \"Test set\")\n",
        "\n",
        "print(f\"  Total feature memory: {total_memory:.2f} MB\")\n",
        "\n",
        "# 3. FEATURE SUMMARY FOR LOGISTIC REGRESSION\n",
        "print(f\"\\n3. FEATURE SUMMARY FOR LOGISTIC REGRESSION\")\n",
        "print(\"=\"*42)\n",
        "\n",
        "print(f\"Dataset ready for Logistic Regression training:\")\n",
        "print(f\"  Training samples: {X_train.shape[0]:,}\")\n",
        "print(f\"  Validation samples: {X_val.shape[0]:,}\")\n",
        "print(f\"  Test samples: {X_test.shape[0]:,}\")\n",
        "print(f\"  Total features: {X_train.shape[1]:,}\")\n",
        "print(f\"  Classes: {len(label_names)} ({', '.join(label_names)})\")\n",
        "\n",
        "print(f\"\\nFeature composition:\")\n",
        "print(f\"  - TF-IDF unigrams/bigrams: {X_tfidf_main.shape[1]:,} features\")\n",
        "print(f\"  - Character n-grams: {X_tfidf_char.shape[1]:,} features\")\n",
        "print(f\"  - Statistical features: {statistical_features_scaled.shape[1]} features\")\n",
        "\n",
        "print(f\"\\nOptimizations for Logistic Regression:\")\n",
        "print(f\"  ✓ Sparse matrix format (efficient memory usage)\")\n",
        "print(f\"  ✓ L2-normalized TF-IDF features\")\n",
        "print(f\"  ✓ StandardScaler applied to statistical features\")\n",
        "print(f\"  ✓ Stratified sampling (balanced class distribution)\")\n",
        "print(f\"  ✓ No data leakage (proper train/val/test split)\")\n",
        "\n",
        "# 4. SAVE PREPROCESSING ARTIFACTS\n",
        "print(f\"\\n4. PREPROCESSING ARTIFACTS\")\n",
        "print(\"=\"*26)\n",
        "\n",
        "# Store key preprocessing objects for later use\n",
        "preprocessing_artifacts = {\n",
        "    'label_encoder': label_encoder,\n",
        "    'label_names': label_names,\n",
        "    'tfidf_main': tfidf_main,\n",
        "    'tfidf_char': tfidf_char,\n",
        "    'statistical_scaler': scaler,\n",
        "    'statistical_feature_names': list(statistical_features.columns)\n",
        "}\n",
        "\n",
        "print(f\"Key preprocessing artifacts stored:\")\n",
        "print(f\"  ✓ Label encoder (sentiment -> numeric)\")\n",
        "print(f\"  ✓ TF-IDF vectorizers (fitted on training data)\")\n",
        "print(f\"  ✓ Statistical feature scaler\")\n",
        "print(f\"  ✓ Feature names and metadata\")\n",
        "\n",
        "# 5. TRAINING DATA SUMMARY\n",
        "print(f\"\\n5. TRAINING DATA SUMMARY\")\n",
        "print(\"=\"*25)\n",
        "\n",
        "print(f\"Ready for Phase 7: Logistic Regression Implementation\")\n",
        "print(f\"\\nTraining configuration:\")\n",
        "print(f\"  - Input features: {X_train.shape[1]:,}\")\n",
        "print(f\"  - Training samples: {X_train.shape[0]:,}\")\n",
        "print(f\"  - Validation samples: {X_val.shape[0]:,}\")\n",
        "print(f\"  - Test samples: {X_test.shape[0]:,}\")\n",
        "print(f\"  - Classes: {len(label_names)}\")\n",
        "print(f\"  - Class imbalance ratio: {max([(y_train == i).sum() for i in range(len(label_names))]) / min([(y_train == i).sum() for i in range(len(label_names))]):.2f}:1\")\n",
        "\n",
        "print(f\"\\n✓ Phase 6 completed successfully!\")\n",
        "print(f\"✓ All data prepared for Logistic Regression training!\")\n",
        "print(\"=\"*50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UDGybjuGX3Yf",
        "outputId": "e2376d92-09b1-4312-e923-020ff2508d90"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "FINAL DATA PREPARATION AND VALIDATION\n",
            "====================================\n",
            "\n",
            "1. DATA INTEGRITY CHECKS\n",
            "=========================\n",
            "Checking for problematic values in feature matrices...\n",
            "  Training set:\n",
            "    Shape: (8655, 10128)\n",
            "    Has NaN: False\n",
            "    Has Inf: False\n",
            "    Non-zero elements: 1,048,856\n",
            "    Density: 0.0120\n",
            "  Validation set:\n",
            "    Shape: (2886, 10128)\n",
            "    Has NaN: False\n",
            "    Has Inf: False\n",
            "    Non-zero elements: 354,683\n",
            "    Density: 0.0121\n",
            "  Test set:\n",
            "    Shape: (2886, 10128)\n",
            "    Has NaN: False\n",
            "    Has Inf: False\n",
            "    Non-zero elements: 345,955\n",
            "    Density: 0.0118\n",
            "✓ All feature matrices are clean and ready for training\n",
            "\n",
            "Target label checks:\n",
            "  Training labels: min=0, max=2, unique=3\n",
            "  Validation labels: min=0, max=2, unique=3\n",
            "  Test labels: min=0, max=2, unique=3\n",
            "\n",
            "2. MEMORY USAGE ANALYSIS\n",
            "=========================\n",
            "  Training set: 12.04 MB\n",
            "  Validation set: 4.07 MB\n",
            "  Test set: 3.97 MB\n",
            "  Total feature memory: 20.08 MB\n",
            "\n",
            "3. FEATURE SUMMARY FOR LOGISTIC REGRESSION\n",
            "==========================================\n",
            "Dataset ready for Logistic Regression training:\n",
            "  Training samples: 8,655\n",
            "  Validation samples: 2,886\n",
            "  Test samples: 2,886\n",
            "  Total features: 10,128\n",
            "  Classes: 3 (negative, neutral, positive)\n",
            "\n",
            "Feature composition:\n",
            "  - TF-IDF unigrams/bigrams: 7,101 features\n",
            "  - Character n-grams: 3,000 features\n",
            "  - Statistical features: 27 features\n",
            "\n",
            "Optimizations for Logistic Regression:\n",
            "  ✓ Sparse matrix format (efficient memory usage)\n",
            "  ✓ L2-normalized TF-IDF features\n",
            "  ✓ StandardScaler applied to statistical features\n",
            "  ✓ Stratified sampling (balanced class distribution)\n",
            "  ✓ No data leakage (proper train/val/test split)\n",
            "\n",
            "4. PREPROCESSING ARTIFACTS\n",
            "==========================\n",
            "Key preprocessing artifacts stored:\n",
            "  ✓ Label encoder (sentiment -> numeric)\n",
            "  ✓ TF-IDF vectorizers (fitted on training data)\n",
            "  ✓ Statistical feature scaler\n",
            "  ✓ Feature names and metadata\n",
            "\n",
            "5. TRAINING DATA SUMMARY\n",
            "=========================\n",
            "Ready for Phase 7: Logistic Regression Implementation\n",
            "\n",
            "Training configuration:\n",
            "  - Input features: 10,128\n",
            "  - Training samples: 8,655\n",
            "  - Validation samples: 2,886\n",
            "  - Test samples: 2,886\n",
            "  - Classes: 3\n",
            "  - Class imbalance ratio: 3.96:1\n",
            "\n",
            "✓ Phase 6 completed successfully!\n",
            "✓ All data prepared for Logistic Regression training!\n",
            "==================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Download the preprocessed dataset\n",
        "print(\"Downloading the preprocessed dataset...\")\n",
        "\n",
        "# Specify the filename for the cleaned data\n",
        "cleaned_data_filename = 'tweets_preprocessed.csv'\n",
        "\n",
        "# Save the DataFrame to a CSV file\n",
        "# Exclude the original text and token columns to save space\n",
        "columns_to_save = [col for col in df.columns if col not in ['original_text', 'tokens', 'tokens_lemmatized', 'tokens_stemmed']]\n",
        "df[columns_to_save].to_csv(cleaned_data_filename, index=False)\n",
        "\n",
        "print(f\"✓ Preprocessed dataset saved to '{cleaned_data_filename}'\")\n",
        "print(\"You can download this file from the files pane on the left.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r0SfIvBnYXOG",
        "outputId": "a225480d-7e47-451d-a6d1-bb1205cd205e"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading the preprocessed dataset...\n",
            "✓ Preprocessed dataset saved to 'tweets_preprocessed.csv'\n",
            "You can download this file from the files pane on the left.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Phase 7: Logistic Regression Implementation\n",
        "\n",
        "Now we'll implement and train the Logistic Regression model using our prepared features. This phase includes model training, hyperparameter tuning, and cross-validation."
      ],
      "metadata": {
        "id": "c-BNiBtea0Fu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 22. Logistic Regression Model Training\n",
        "\n",
        "Train the Logistic Regression model with hyperparameter tuning using Grid Search."
      ],
      "metadata": {
        "id": "RDLdxqU4a0_O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Logistic Regression Implementation\n",
        "print(\"PHASE 7: LOGISTIC REGRESSION IMPLEMENTATION\")\n",
        "print(\"=\"*42)\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import GridSearchCV, cross_val_score\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "import time\n",
        "\n",
        "# 1. BASELINE LOGISTIC REGRESSION\n",
        "print(f\"\\n1. BASELINE LOGISTIC REGRESSION\")\n",
        "print(\"=\"*31)\n",
        "\n",
        "print(\"Training baseline Logistic Regression...\")\n",
        "start_time = time.time()\n",
        "\n",
        "# Create baseline model\n",
        "baseline_lr = LogisticRegression(\n",
        "    random_state=42,\n",
        "    max_iter=1000,\n",
        "    solver='liblinear'  # Good for sparse high-dimensional data\n",
        ")\n",
        "\n",
        "# Train baseline model\n",
        "baseline_lr.fit(X_train, y_train)\n",
        "baseline_time = time.time() - start_time\n",
        "\n",
        "print(f\"✓ Baseline model trained in {baseline_time:.2f} seconds\")\n",
        "\n",
        "# Baseline predictions\n",
        "y_train_pred_baseline = baseline_lr.predict(X_train)\n",
        "y_val_pred_baseline = baseline_lr.predict(X_val)\n",
        "\n",
        "# Baseline scores\n",
        "train_acc_baseline = accuracy_score(y_train, y_train_pred_baseline)\n",
        "val_acc_baseline = accuracy_score(y_val, y_val_pred_baseline)\n",
        "\n",
        "print(f\"Baseline Results:\")\n",
        "print(f\"  Training Accuracy: {train_acc_baseline:.4f}\")\n",
        "print(f\"  Validation Accuracy: {val_acc_baseline:.4f}\")\n",
        "print(f\"  Overfitting: {train_acc_baseline - val_acc_baseline:.4f}\")\n",
        "\n",
        "# 2. HYPERPARAMETER TUNING\n",
        "print(f\"\\n2. HYPERPARAMETER TUNING\")\n",
        "print(\"=\"*26)\n",
        "\n",
        "print(\"Setting up Grid Search for hyperparameter tuning...\")\n",
        "\n",
        "# Define parameter grid\n",
        "param_grid = {\n",
        "    'C': [0.1, 1.0, 10.0, 100.0],           # Regularization strength\n",
        "    'penalty': ['l1', 'l2'],                 # Regularization type\n",
        "    'solver': ['liblinear'],                 # Solver that supports both L1 and L2\n",
        "    'class_weight': [None, 'balanced']       # Handle class imbalance\n",
        "}\n",
        "\n",
        "print(f\"Parameter grid:\")\n",
        "for param, values in param_grid.items():\n",
        "    print(f\"  {param}: {values}\")\n",
        "\n",
        "# Create GridSearchCV\n",
        "grid_search = GridSearchCV(\n",
        "    LogisticRegression(random_state=42, max_iter=1000),\n",
        "    param_grid,\n",
        "    cv=5,                    # 5-fold cross-validation\n",
        "    scoring='f1_weighted',   # Use weighted F1 for imbalanced classes\n",
        "    n_jobs=-1,              # Use all processors\n",
        "    verbose=1               # Show progress\n",
        ")\n",
        "\n",
        "print(f\"\\nStarting Grid Search with 5-fold CV...\")\n",
        "print(f\"Total combinations to test: {len(param_grid['C']) * len(param_grid['penalty']) * len(param_grid['solver']) * len(param_grid['class_weight'])}\")\n",
        "\n",
        "start_time = time.time()\n",
        "grid_search.fit(X_train, y_train)\n",
        "grid_time = time.time() - start_time\n",
        "\n",
        "print(f\"✓ Grid Search completed in {grid_time:.2f} seconds\")\n",
        "\n",
        "# 3. BEST MODEL RESULTS\n",
        "print(f\"\\n3. BEST MODEL RESULTS\")\n",
        "print(\"=\"*21)\n",
        "\n",
        "best_model = grid_search.best_estimator_\n",
        "best_params = grid_search.best_params_\n",
        "best_score = grid_search.best_score_\n",
        "\n",
        "print(f\"Best parameters found:\")\n",
        "for param, value in best_params.items():\n",
        "    print(f\"  {param}: {value}\")\n",
        "\n",
        "print(f\"\\nBest CV Score (Weighted F1): {best_score:.4f}\")\n",
        "\n",
        "# Train and validation predictions with best model\n",
        "y_train_pred_best = best_model.predict(X_train)\n",
        "y_val_pred_best = best_model.predict(X_val)\n",
        "\n",
        "# Best model scores\n",
        "train_acc_best = accuracy_score(y_train, y_train_pred_best)\n",
        "val_acc_best = accuracy_score(y_val, y_val_pred_best)\n",
        "\n",
        "print(f\"\\nBest Model Performance:\")\n",
        "print(f\"  Training Accuracy: {train_acc_best:.4f}\")\n",
        "print(f\"  Validation Accuracy: {val_acc_best:.4f}\")\n",
        "print(f\"  Overfitting: {train_acc_best - val_acc_best:.4f}\")\n",
        "\n",
        "print(f\"\\nImprovement over baseline:\")\n",
        "print(f\"  Validation Accuracy: {val_acc_best - val_acc_baseline:+.4f}\")\n",
        "\n",
        "# 4. CROSS-VALIDATION ANALYSIS\n",
        "print(f\"\\n4. CROSS-VALIDATION ANALYSIS\")\n",
        "print(\"=\"*30)\n",
        "\n",
        "print(\"Performing detailed cross-validation...\")\n",
        "\n",
        "# Multiple scoring metrics\n",
        "scoring = ['accuracy', 'precision_weighted', 'recall_weighted', 'f1_weighted']\n",
        "cv_results = {}\n",
        "\n",
        "for score in scoring:\n",
        "    scores = cross_val_score(best_model, X_train, y_train, cv=5, scoring=score)\n",
        "    cv_results[score] = scores\n",
        "    print(f\"{score}: {scores.mean():.4f} (+/- {scores.std() * 2:.4f})\")\n",
        "\n",
        "print(f\"\\n✓ Logistic Regression training completed!\")\n",
        "print(f\"✓ Best model ready for final evaluation!\")\n",
        "print(\"=\"*42)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z4C76NoIaIqO",
        "outputId": "91ae0a3d-65fc-4e17-f73b-c6a35ac714c2"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PHASE 7: LOGISTIC REGRESSION IMPLEMENTATION\n",
            "==========================================\n",
            "\n",
            "1. BASELINE LOGISTIC REGRESSION\n",
            "===============================\n",
            "Training baseline Logistic Regression...\n",
            "✓ Baseline model trained in 7.34 seconds\n",
            "Baseline Results:\n",
            "  Training Accuracy: 0.8683\n",
            "  Validation Accuracy: 0.8032\n",
            "  Overfitting: 0.0651\n",
            "\n",
            "2. HYPERPARAMETER TUNING\n",
            "==========================\n",
            "Setting up Grid Search for hyperparameter tuning...\n",
            "Parameter grid:\n",
            "  C: [0.1, 1.0, 10.0, 100.0]\n",
            "  penalty: ['l1', 'l2']\n",
            "  solver: ['liblinear']\n",
            "  class_weight: [None, 'balanced']\n",
            "\n",
            "Starting Grid Search with 5-fold CV...\n",
            "Total combinations to test: 16\n",
            "Fitting 5 folds for each of 16 candidates, totalling 80 fits\n",
            "✓ Grid Search completed in 373.79 seconds\n",
            "\n",
            "3. BEST MODEL RESULTS\n",
            "=====================\n",
            "Best parameters found:\n",
            "  C: 1.0\n",
            "  class_weight: balanced\n",
            "  penalty: l2\n",
            "  solver: liblinear\n",
            "\n",
            "Best CV Score (Weighted F1): 0.7775\n",
            "\n",
            "Best Model Performance:\n",
            "  Training Accuracy: 0.8802\n",
            "  Validation Accuracy: 0.7956\n",
            "  Overfitting: 0.0846\n",
            "\n",
            "Improvement over baseline:\n",
            "  Validation Accuracy: -0.0076\n",
            "\n",
            "4. CROSS-VALIDATION ANALYSIS\n",
            "==============================\n",
            "Performing detailed cross-validation...\n",
            "accuracy: 0.7777 (+/- 0.0129)\n",
            "precision_weighted: 0.7775 (+/- 0.0139)\n",
            "recall_weighted: 0.7777 (+/- 0.0129)\n",
            "f1_weighted: 0.7775 (+/- 0.0133)\n",
            "\n",
            "✓ Logistic Regression training completed!\n",
            "✓ Best model ready for final evaluation!\n",
            "==========================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Final Model Evaluation\n",
        "print(\"PHASE 8: MODEL EVALUATION AND FINAL RESULTS\")\n",
        "print(\"=\"*43)\n",
        "\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 1. TEST SET EVALUATION\n",
        "print(f\"\\n1. TEST SET EVALUATION\")\n",
        "print(\"=\"*21)\n",
        "\n",
        "print(\"Evaluating best model on test set...\")\n",
        "\n",
        "# Final predictions on test set\n",
        "y_test_pred = best_model.predict(X_test)\n",
        "y_test_proba = best_model.predict_proba(X_test)\n",
        "\n",
        "# Test set accuracy\n",
        "test_accuracy = accuracy_score(y_test, y_test_pred)\n",
        "print(f\"✓ Test Set Accuracy: {test_accuracy:.4f}\")\n",
        "\n",
        "# 2. DETAILED CLASSIFICATION METRICS\n",
        "print(f\"\\n2. DETAILED CLASSIFICATION METRICS\")\n",
        "print(\"=\"*35)\n",
        "\n",
        "print(\"Classification Report:\")\n",
        "print(classification_report(y_test, y_test_pred, target_names=label_names))\n",
        "\n",
        "# 3. CONFUSION MATRIX\n",
        "print(f\"\\n3. CONFUSION MATRIX\")\n",
        "print(\"=\"*18)\n",
        "\n",
        "# Create confusion matrix\n",
        "cm = confusion_matrix(y_test, y_test_pred)\n",
        "print(\"Confusion Matrix:\")\n",
        "print(cm)\n",
        "\n",
        "# Plot confusion matrix\n",
        "plt.figure(figsize=(10, 8))\n",
        "\n",
        "# Normalized confusion matrix\n",
        "plt.subplot(1, 2, 1)\n",
        "cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
        "sns.heatmap(cm_normalized, annot=True, fmt='.3f', cmap='Blues',\n",
        "            xticklabels=label_names, yticklabels=label_names)\n",
        "plt.title('Normalized Confusion Matrix')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "\n",
        "# Raw confusion matrix\n",
        "plt.subplot(1, 2, 2)\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
        "            xticklabels=label_names, yticklabels=label_names)\n",
        "plt.title('Raw Confusion Matrix')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "# 4. MODEL PERFORMANCE SUMMARY\n",
        "print(f\"\\n4. MODEL PERFORMANCE SUMMARY\")\n",
        "print(\"=\"*30)\n",
        "\n",
        "# Calculate per-class metrics\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "\n",
        "precision, recall, f1, support = precision_recall_fscore_support(\n",
        "    y_test, y_test_pred, average=None, labels=range(len(label_names))\n",
        ")\n",
        "\n",
        "print(f\"Per-class Performance:\")\n",
        "print(f\"{'Class':<12} {'Precision':<10} {'Recall':<8} {'F1-Score':<8} {'Support':<8}\")\n",
        "print(\"=\"*50)\n",
        "for i, class_name in enumerate(label_names):\n",
        "    print(f\"{class_name:<12} {precision[i]:<10.4f} {recall[i]:<8.4f} {f1[i]:<8.4f} {support[i]:<8}\")\n",
        "\n",
        "# Overall metrics\n",
        "overall_precision = precision_recall_fscore_support(y_test, y_test_pred, average='weighted')[0]\n",
        "overall_recall = precision_recall_fscore_support(y_test, y_test_pred, average='weighted')[1]\n",
        "overall_f1 = precision_recall_fscore_support(y_test, y_test_pred, average='weighted')[2]\n",
        "\n",
        "print(f\"\\nOverall Performance (Weighted Average):\")\n",
        "print(f\"  Precision: {overall_precision:.4f}\")\n",
        "print(f\"  Recall: {overall_recall:.4f}\")\n",
        "print(f\"  F1-Score: {overall_f1:.4f}\")\n",
        "print(f\"  Accuracy: {test_accuracy:.4f}\")\n",
        "\n",
        "# 5. FEATURE IMPORTANCE ANALYSIS\n",
        "print(f\"\\n5. FEATURE IMPORTANCE ANALYSIS\")\n",
        "print(\"=\"*32)\n",
        "\n",
        "# Get feature coefficients\n",
        "feature_coefs = best_model.coef_\n",
        "\n",
        "print(f\"Analyzing most important features for each class...\")\n",
        "\n",
        "# Combine all feature names\n",
        "all_feature_names = list(tfidf_main.get_feature_names_out()) + \\\n",
        "                   list(tfidf_char.get_feature_names_out()) + \\\n",
        "                   list(statistical_features.columns)\n",
        "\n",
        "# Top features for each class\n",
        "for class_idx, class_name in enumerate(label_names):\n",
        "    print(f\"\\nTop 10 features for {class_name.upper()} class:\")\n",
        "    coefs = feature_coefs[class_idx]\n",
        "    top_indices = np.argsort(np.abs(coefs))[-10:][::-1]\n",
        "\n",
        "    for i, idx in enumerate(top_indices, 1):\n",
        "        feature_name = all_feature_names[idx]\n",
        "        coef_value = coefs[idx]\n",
        "        print(f\"  {i:2d}. {feature_name:<25} {coef_value:+.4f}\")\n",
        "\n",
        "print(f\"\\n✓ Feature importance analysis completed!\")\n",
        "print(\"=\"*43)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "MDUi3AQya9gO",
        "outputId": "f2b52e53-9ca9-4905-b299-300e3f0de044"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PHASE 8: MODEL EVALUATION AND FINAL RESULTS\n",
            "===========================================\n",
            "\n",
            "1. TEST SET EVALUATION\n",
            "=====================\n",
            "Evaluating best model on test set...\n",
            "✓ Test Set Accuracy: 0.7876\n",
            "\n",
            "2. DETAILED CLASSIFICATION METRICS\n",
            "===================================\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "    negative       0.87      0.85      0.86      1816\n",
            "     neutral       0.60      0.62      0.61       612\n",
            "    positive       0.73      0.76      0.74       458\n",
            "\n",
            "    accuracy                           0.79      2886\n",
            "   macro avg       0.73      0.74      0.74      2886\n",
            "weighted avg       0.79      0.79      0.79      2886\n",
            "\n",
            "\n",
            "3. CONFUSION MATRIX\n",
            "==================\n",
            "Confusion Matrix:\n",
            "[[1547  198   71]\n",
            " [ 173  380   59]\n",
            " [  61   51  346]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "4. MODEL PERFORMANCE SUMMARY\n",
            "==============================\n",
            "Per-class Performance:\n",
            "Class        Precision  Recall   F1-Score Support \n",
            "==================================================\n",
            "negative     0.8686     0.8519   0.8602   1816    \n",
            "neutral      0.6041     0.6209   0.6124   612     \n",
            "positive     0.7269     0.7555   0.7409   458     \n",
            "\n",
            "Overall Performance (Weighted Average):\n",
            "  Precision: 0.7900\n",
            "  Recall: 0.7876\n",
            "  F1-Score: 0.7887\n",
            "  Accuracy: 0.7876\n",
            "\n",
            "5. FEATURE IMPORTANCE ANALYSIS\n",
            "================================\n",
            "Analyzing most important features for each class...\n",
            "\n",
            "Top 10 features for NEGATIVE class:\n",
            "   1. thank                     -2.4808\n",
            "   2. bag                       +2.0752\n",
            "   3. hour                      +1.9909\n",
            "   4. hold                      +1.9092\n",
            "   5. hr                        +1.7144\n",
            "   6. than                      -1.5754\n",
            "   7. suck                      +1.5628\n",
            "   8. hank                      -1.5381\n",
            "   9. thank                     -1.5381\n",
            "  10. thanks                    -1.5130\n",
            "\n",
            "Top 10 features for NEUTRAL class:\n",
            "   1. bag                       -2.0920\n",
            "   2. hold                      -1.7951\n",
            "   3. hour                      -1.7063\n",
            "   4. delay cancelled           +1.6662\n",
            "   5. thank response            +1.6488\n",
            "   6. suck                      -1.6203\n",
            "   7. hr                        -1.5201\n",
            "   8. fix                       -1.4871\n",
            "   9. mexico                    +1.3756\n",
            "  10. helpful                   -1.3454\n",
            "\n",
            "Top 10 features for POSITIVE class:\n",
            "   1. hank                      +2.9008\n",
            "   2. ank                       +2.7467\n",
            "   3. kudos                     +2.7111\n",
            "   4. thx                       +2.6252\n",
            "   5. anks                      +2.3303\n",
            "   6. nks                       +2.3295\n",
            "   7. happy                     +2.3139\n",
            "   8. ks                        +2.2662\n",
            "   9. nk                        +2.2071\n",
            "  10. wel                       +2.1556\n",
            "\n",
            "✓ Feature importance analysis completed!\n",
            "===========================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the trained model\n",
        "import pickle\n",
        "\n",
        "# Specify the filename for the saved model\n",
        "model_filename = 'logistic_regression_model.pkl'\n",
        "\n",
        "# Save the best model trained in Phase 7\n",
        "with open(model_filename, 'wb') as f:\n",
        "    pickle.dump(best_model, f)\n",
        "\n",
        "print(f\"✓ Trained Logistic Regression model saved to '{model_filename}'\")\n",
        "print(\"You can download this file from the files pane on the left.\")\n",
        "\n",
        "# Save the preprocessing artifacts as well\n",
        "preprocessing_artifacts_filename = 'preprocessing_artifacts.pkl'\n",
        "with open(preprocessing_artifacts_filename, 'wb') as f:\n",
        "    pickle.dump(preprocessing_artifacts, f)\n",
        "\n",
        "print(f\"✓ Preprocessing artifacts saved to '{preprocessing_artifacts_filename}'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_DiEnPiScsLP",
        "outputId": "3715e686-bf3c-42ec-fcc1-e13564cee7c5"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✓ Trained Logistic Regression model saved to 'logistic_regression_model.pkl'\n",
            "You can download this file from the files pane on the left.\n",
            "✓ Preprocessing artifacts saved to 'preprocessing_artifacts.pkl'\n"
          ]
        }
      ]
    }
  ]
}